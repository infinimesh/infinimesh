// Code generated by mockery v2.40.1. DO NOT EDIT.

package node_mocks

import (
	access "github.com/infinimesh/proto/node/access"
	accounts "github.com/infinimesh/proto/node/accounts"

	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	namespaces "github.com/infinimesh/proto/node/namespaces"

	node "github.com/infinimesh/proto/node"
)

// MockNamespacesServiceClient is an autogenerated mock type for the NamespacesServiceClient type
type MockNamespacesServiceClient struct {
	mock.Mock
}

type MockNamespacesServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNamespacesServiceClient) EXPECT() *MockNamespacesServiceClient_Expecter {
	return &MockNamespacesServiceClient_Expecter{mock: &_m.Mock}
}

// Accessibles provides a mock function with given fields: ctx, in, opts
func (_m *MockNamespacesServiceClient) Accessibles(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*access.Nodes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Accessibles")
	}

	var r0 *access.Nodes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*access.Nodes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) *access.Nodes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.Nodes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Accessibles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accessibles'
type MockNamespacesServiceClient_Accessibles_Call struct {
	*mock.Call
}

// Accessibles is a helper method to define mock.On call
//   - ctx context.Context
//   - in *namespaces.Namespace
//   - opts ...grpc.CallOption
func (_e *MockNamespacesServiceClient_Expecter) Accessibles(ctx interface{}, in interface{}, opts ...interface{}) *MockNamespacesServiceClient_Accessibles_Call {
	return &MockNamespacesServiceClient_Accessibles_Call{Call: _e.mock.On("Accessibles",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNamespacesServiceClient_Accessibles_Call) Run(run func(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption)) *MockNamespacesServiceClient_Accessibles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*namespaces.Namespace), variadicArgs...)
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Accessibles_Call) Return(_a0 *access.Nodes, _a1 error) *MockNamespacesServiceClient_Accessibles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Accessibles_Call) RunAndReturn(run func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*access.Nodes, error)) *MockNamespacesServiceClient_Accessibles_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *MockNamespacesServiceClient) Create(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*namespaces.Namespace, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *namespaces.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*namespaces.Namespace, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) *namespaces.Namespace); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespaces.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockNamespacesServiceClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - in *namespaces.Namespace
//   - opts ...grpc.CallOption
func (_e *MockNamespacesServiceClient_Expecter) Create(ctx interface{}, in interface{}, opts ...interface{}) *MockNamespacesServiceClient_Create_Call {
	return &MockNamespacesServiceClient_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNamespacesServiceClient_Create_Call) Run(run func(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption)) *MockNamespacesServiceClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*namespaces.Namespace), variadicArgs...)
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Create_Call) Return(_a0 *namespaces.Namespace, _a1 error) *MockNamespacesServiceClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Create_Call) RunAndReturn(run func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*namespaces.Namespace, error)) *MockNamespacesServiceClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Deletables provides a mock function with given fields: ctx, in, opts
func (_m *MockNamespacesServiceClient) Deletables(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*access.Nodes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Deletables")
	}

	var r0 *access.Nodes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*access.Nodes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) *access.Nodes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.Nodes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Deletables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deletables'
type MockNamespacesServiceClient_Deletables_Call struct {
	*mock.Call
}

// Deletables is a helper method to define mock.On call
//   - ctx context.Context
//   - in *namespaces.Namespace
//   - opts ...grpc.CallOption
func (_e *MockNamespacesServiceClient_Expecter) Deletables(ctx interface{}, in interface{}, opts ...interface{}) *MockNamespacesServiceClient_Deletables_Call {
	return &MockNamespacesServiceClient_Deletables_Call{Call: _e.mock.On("Deletables",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNamespacesServiceClient_Deletables_Call) Run(run func(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption)) *MockNamespacesServiceClient_Deletables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*namespaces.Namespace), variadicArgs...)
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Deletables_Call) Return(_a0 *access.Nodes, _a1 error) *MockNamespacesServiceClient_Deletables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Deletables_Call) RunAndReturn(run func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*access.Nodes, error)) *MockNamespacesServiceClient_Deletables_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *MockNamespacesServiceClient) Delete(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*node.DeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *node.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*node.DeleteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) *node.DeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockNamespacesServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - in *namespaces.Namespace
//   - opts ...grpc.CallOption
func (_e *MockNamespacesServiceClient_Expecter) Delete(ctx interface{}, in interface{}, opts ...interface{}) *MockNamespacesServiceClient_Delete_Call {
	return &MockNamespacesServiceClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNamespacesServiceClient_Delete_Call) Run(run func(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption)) *MockNamespacesServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*namespaces.Namespace), variadicArgs...)
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Delete_Call) Return(_a0 *node.DeleteResponse, _a1 error) *MockNamespacesServiceClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Delete_Call) RunAndReturn(run func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*node.DeleteResponse, error)) *MockNamespacesServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *MockNamespacesServiceClient) Get(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*namespaces.Namespace, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *namespaces.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*namespaces.Namespace, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) *namespaces.Namespace); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespaces.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockNamespacesServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - in *namespaces.Namespace
//   - opts ...grpc.CallOption
func (_e *MockNamespacesServiceClient_Expecter) Get(ctx interface{}, in interface{}, opts ...interface{}) *MockNamespacesServiceClient_Get_Call {
	return &MockNamespacesServiceClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNamespacesServiceClient_Get_Call) Run(run func(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption)) *MockNamespacesServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*namespaces.Namespace), variadicArgs...)
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Get_Call) Return(_a0 *namespaces.Namespace, _a1 error) *MockNamespacesServiceClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Get_Call) RunAndReturn(run func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*namespaces.Namespace, error)) *MockNamespacesServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: ctx, in, opts
func (_m *MockNamespacesServiceClient) Join(ctx context.Context, in *node.JoinRequest, opts ...grpc.CallOption) (*accounts.Accounts, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 *accounts.Accounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *node.JoinRequest, ...grpc.CallOption) (*accounts.Accounts, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *node.JoinRequest, ...grpc.CallOption) *accounts.Accounts); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Accounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *node.JoinRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockNamespacesServiceClient_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.JoinRequest
//   - opts ...grpc.CallOption
func (_e *MockNamespacesServiceClient_Expecter) Join(ctx interface{}, in interface{}, opts ...interface{}) *MockNamespacesServiceClient_Join_Call {
	return &MockNamespacesServiceClient_Join_Call{Call: _e.mock.On("Join",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNamespacesServiceClient_Join_Call) Run(run func(ctx context.Context, in *node.JoinRequest, opts ...grpc.CallOption)) *MockNamespacesServiceClient_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*node.JoinRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Join_Call) Return(_a0 *accounts.Accounts, _a1 error) *MockNamespacesServiceClient_Join_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Join_Call) RunAndReturn(run func(context.Context, *node.JoinRequest, ...grpc.CallOption) (*accounts.Accounts, error)) *MockNamespacesServiceClient_Join_Call {
	_c.Call.Return(run)
	return _c
}

// Joins provides a mock function with given fields: ctx, in, opts
func (_m *MockNamespacesServiceClient) Joins(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*accounts.Accounts, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Joins")
	}

	var r0 *accounts.Accounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*accounts.Accounts, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) *accounts.Accounts); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Accounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Joins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Joins'
type MockNamespacesServiceClient_Joins_Call struct {
	*mock.Call
}

// Joins is a helper method to define mock.On call
//   - ctx context.Context
//   - in *namespaces.Namespace
//   - opts ...grpc.CallOption
func (_e *MockNamespacesServiceClient_Expecter) Joins(ctx interface{}, in interface{}, opts ...interface{}) *MockNamespacesServiceClient_Joins_Call {
	return &MockNamespacesServiceClient_Joins_Call{Call: _e.mock.On("Joins",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNamespacesServiceClient_Joins_Call) Run(run func(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption)) *MockNamespacesServiceClient_Joins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*namespaces.Namespace), variadicArgs...)
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Joins_Call) Return(_a0 *accounts.Accounts, _a1 error) *MockNamespacesServiceClient_Joins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Joins_Call) RunAndReturn(run func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*accounts.Accounts, error)) *MockNamespacesServiceClient_Joins_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *MockNamespacesServiceClient) List(ctx context.Context, in *node.EmptyMessage, opts ...grpc.CallOption) (*namespaces.Namespaces, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *namespaces.Namespaces
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *node.EmptyMessage, ...grpc.CallOption) (*namespaces.Namespaces, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *node.EmptyMessage, ...grpc.CallOption) *namespaces.Namespaces); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespaces.Namespaces)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *node.EmptyMessage, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockNamespacesServiceClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.EmptyMessage
//   - opts ...grpc.CallOption
func (_e *MockNamespacesServiceClient_Expecter) List(ctx interface{}, in interface{}, opts ...interface{}) *MockNamespacesServiceClient_List_Call {
	return &MockNamespacesServiceClient_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNamespacesServiceClient_List_Call) Run(run func(ctx context.Context, in *node.EmptyMessage, opts ...grpc.CallOption)) *MockNamespacesServiceClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*node.EmptyMessage), variadicArgs...)
	})
	return _c
}

func (_c *MockNamespacesServiceClient_List_Call) Return(_a0 *namespaces.Namespaces, _a1 error) *MockNamespacesServiceClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_List_Call) RunAndReturn(run func(context.Context, *node.EmptyMessage, ...grpc.CallOption) (*namespaces.Namespaces, error)) *MockNamespacesServiceClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *MockNamespacesServiceClient) Update(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*namespaces.Namespace, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *namespaces.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*namespaces.Namespace, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) *namespaces.Namespace); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespaces.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.Namespace, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockNamespacesServiceClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - in *namespaces.Namespace
//   - opts ...grpc.CallOption
func (_e *MockNamespacesServiceClient_Expecter) Update(ctx interface{}, in interface{}, opts ...interface{}) *MockNamespacesServiceClient_Update_Call {
	return &MockNamespacesServiceClient_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNamespacesServiceClient_Update_Call) Run(run func(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption)) *MockNamespacesServiceClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*namespaces.Namespace), variadicArgs...)
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Update_Call) Return(_a0 *namespaces.Namespace, _a1 error) *MockNamespacesServiceClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Update_Call) RunAndReturn(run func(context.Context, *namespaces.Namespace, ...grpc.CallOption) (*namespaces.Namespace, error)) *MockNamespacesServiceClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNamespacesServiceClient creates a new instance of MockNamespacesServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNamespacesServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNamespacesServiceClient {
	mock := &MockNamespacesServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
