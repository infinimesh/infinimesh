// Code generated by mockery v2.42.0. DO NOT EDIT.

package handsfree_mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	handsfree "github.com/infinimesh/proto/handsfree"

	mock "github.com/stretchr/testify/mock"
)

// MockHandsfreeServiceClient is an autogenerated mock type for the HandsfreeServiceClient type
type MockHandsfreeServiceClient struct {
	mock.Mock
}

type MockHandsfreeServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandsfreeServiceClient) EXPECT() *MockHandsfreeServiceClient_Expecter {
	return &MockHandsfreeServiceClient_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx, in, opts
func (_m *MockHandsfreeServiceClient) Connect(ctx context.Context, in *handsfree.ConnectionRequest, opts ...grpc.CallOption) (handsfree.HandsfreeService_ConnectClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 handsfree.HandsfreeService_ConnectClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *handsfree.ConnectionRequest, ...grpc.CallOption) (handsfree.HandsfreeService_ConnectClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *handsfree.ConnectionRequest, ...grpc.CallOption) handsfree.HandsfreeService_ConnectClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handsfree.HandsfreeService_ConnectClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *handsfree.ConnectionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHandsfreeServiceClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockHandsfreeServiceClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
//   - in *handsfree.ConnectionRequest
//   - opts ...grpc.CallOption
func (_e *MockHandsfreeServiceClient_Expecter) Connect(ctx interface{}, in interface{}, opts ...interface{}) *MockHandsfreeServiceClient_Connect_Call {
	return &MockHandsfreeServiceClient_Connect_Call{Call: _e.mock.On("Connect",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHandsfreeServiceClient_Connect_Call) Run(run func(ctx context.Context, in *handsfree.ConnectionRequest, opts ...grpc.CallOption)) *MockHandsfreeServiceClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*handsfree.ConnectionRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockHandsfreeServiceClient_Connect_Call) Return(_a0 handsfree.HandsfreeService_ConnectClient, _a1 error) *MockHandsfreeServiceClient_Connect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHandsfreeServiceClient_Connect_Call) RunAndReturn(run func(context.Context, *handsfree.ConnectionRequest, ...grpc.CallOption) (handsfree.HandsfreeService_ConnectClient, error)) *MockHandsfreeServiceClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, in, opts
func (_m *MockHandsfreeServiceClient) Send(ctx context.Context, in *handsfree.ControlPacket, opts ...grpc.CallOption) (*handsfree.ControlPacket, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *handsfree.ControlPacket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *handsfree.ControlPacket, ...grpc.CallOption) (*handsfree.ControlPacket, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *handsfree.ControlPacket, ...grpc.CallOption) *handsfree.ControlPacket); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*handsfree.ControlPacket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *handsfree.ControlPacket, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHandsfreeServiceClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockHandsfreeServiceClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - in *handsfree.ControlPacket
//   - opts ...grpc.CallOption
func (_e *MockHandsfreeServiceClient_Expecter) Send(ctx interface{}, in interface{}, opts ...interface{}) *MockHandsfreeServiceClient_Send_Call {
	return &MockHandsfreeServiceClient_Send_Call{Call: _e.mock.On("Send",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHandsfreeServiceClient_Send_Call) Run(run func(ctx context.Context, in *handsfree.ControlPacket, opts ...grpc.CallOption)) *MockHandsfreeServiceClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*handsfree.ControlPacket), variadicArgs...)
	})
	return _c
}

func (_c *MockHandsfreeServiceClient_Send_Call) Return(_a0 *handsfree.ControlPacket, _a1 error) *MockHandsfreeServiceClient_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHandsfreeServiceClient_Send_Call) RunAndReturn(run func(context.Context, *handsfree.ControlPacket, ...grpc.CallOption) (*handsfree.ControlPacket, error)) *MockHandsfreeServiceClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandsfreeServiceClient creates a new instance of MockHandsfreeServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandsfreeServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandsfreeServiceClient {
	mock := &MockHandsfreeServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
