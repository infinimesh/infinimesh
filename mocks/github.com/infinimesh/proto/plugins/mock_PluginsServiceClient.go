// Code generated by mockery v2.40.1. DO NOT EDIT.

package plugins_mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	plugins "github.com/infinimesh/proto/plugins"
)

// MockPluginsServiceClient is an autogenerated mock type for the PluginsServiceClient type
type MockPluginsServiceClient struct {
	mock.Mock
}

type MockPluginsServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPluginsServiceClient) EXPECT() *MockPluginsServiceClient_Expecter {
	return &MockPluginsServiceClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *MockPluginsServiceClient) Create(ctx context.Context, in *plugins.Plugin, opts ...grpc.CallOption) (*plugins.Plugin, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *plugins.Plugin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) (*plugins.Plugin, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) *plugins.Plugin); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.Plugin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPluginsServiceClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPluginsServiceClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - in *plugins.Plugin
//   - opts ...grpc.CallOption
func (_e *MockPluginsServiceClient_Expecter) Create(ctx interface{}, in interface{}, opts ...interface{}) *MockPluginsServiceClient_Create_Call {
	return &MockPluginsServiceClient_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockPluginsServiceClient_Create_Call) Run(run func(ctx context.Context, in *plugins.Plugin, opts ...grpc.CallOption)) *MockPluginsServiceClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*plugins.Plugin), variadicArgs...)
	})
	return _c
}

func (_c *MockPluginsServiceClient_Create_Call) Return(_a0 *plugins.Plugin, _a1 error) *MockPluginsServiceClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPluginsServiceClient_Create_Call) RunAndReturn(run func(context.Context, *plugins.Plugin, ...grpc.CallOption) (*plugins.Plugin, error)) *MockPluginsServiceClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *MockPluginsServiceClient) Delete(ctx context.Context, in *plugins.Plugin, opts ...grpc.CallOption) (*plugins.Plugin, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *plugins.Plugin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) (*plugins.Plugin, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) *plugins.Plugin); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.Plugin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPluginsServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPluginsServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - in *plugins.Plugin
//   - opts ...grpc.CallOption
func (_e *MockPluginsServiceClient_Expecter) Delete(ctx interface{}, in interface{}, opts ...interface{}) *MockPluginsServiceClient_Delete_Call {
	return &MockPluginsServiceClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockPluginsServiceClient_Delete_Call) Run(run func(ctx context.Context, in *plugins.Plugin, opts ...grpc.CallOption)) *MockPluginsServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*plugins.Plugin), variadicArgs...)
	})
	return _c
}

func (_c *MockPluginsServiceClient_Delete_Call) Return(_a0 *plugins.Plugin, _a1 error) *MockPluginsServiceClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPluginsServiceClient_Delete_Call) RunAndReturn(run func(context.Context, *plugins.Plugin, ...grpc.CallOption) (*plugins.Plugin, error)) *MockPluginsServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *MockPluginsServiceClient) Get(ctx context.Context, in *plugins.Plugin, opts ...grpc.CallOption) (*plugins.Plugin, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *plugins.Plugin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) (*plugins.Plugin, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) *plugins.Plugin); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.Plugin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPluginsServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPluginsServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - in *plugins.Plugin
//   - opts ...grpc.CallOption
func (_e *MockPluginsServiceClient_Expecter) Get(ctx interface{}, in interface{}, opts ...interface{}) *MockPluginsServiceClient_Get_Call {
	return &MockPluginsServiceClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockPluginsServiceClient_Get_Call) Run(run func(ctx context.Context, in *plugins.Plugin, opts ...grpc.CallOption)) *MockPluginsServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*plugins.Plugin), variadicArgs...)
	})
	return _c
}

func (_c *MockPluginsServiceClient_Get_Call) Return(_a0 *plugins.Plugin, _a1 error) *MockPluginsServiceClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPluginsServiceClient_Get_Call) RunAndReturn(run func(context.Context, *plugins.Plugin, ...grpc.CallOption) (*plugins.Plugin, error)) *MockPluginsServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *MockPluginsServiceClient) List(ctx context.Context, in *plugins.ListRequest, opts ...grpc.CallOption) (*plugins.Plugins, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *plugins.Plugins
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.ListRequest, ...grpc.CallOption) (*plugins.Plugins, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.ListRequest, ...grpc.CallOption) *plugins.Plugins); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.Plugins)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.ListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPluginsServiceClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockPluginsServiceClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - in *plugins.ListRequest
//   - opts ...grpc.CallOption
func (_e *MockPluginsServiceClient_Expecter) List(ctx interface{}, in interface{}, opts ...interface{}) *MockPluginsServiceClient_List_Call {
	return &MockPluginsServiceClient_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockPluginsServiceClient_List_Call) Run(run func(ctx context.Context, in *plugins.ListRequest, opts ...grpc.CallOption)) *MockPluginsServiceClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*plugins.ListRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockPluginsServiceClient_List_Call) Return(_a0 *plugins.Plugins, _a1 error) *MockPluginsServiceClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPluginsServiceClient_List_Call) RunAndReturn(run func(context.Context, *plugins.ListRequest, ...grpc.CallOption) (*plugins.Plugins, error)) *MockPluginsServiceClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *MockPluginsServiceClient) Update(ctx context.Context, in *plugins.Plugin, opts ...grpc.CallOption) (*plugins.Plugin, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *plugins.Plugin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) (*plugins.Plugin, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) *plugins.Plugin); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.Plugin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.Plugin, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPluginsServiceClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPluginsServiceClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - in *plugins.Plugin
//   - opts ...grpc.CallOption
func (_e *MockPluginsServiceClient_Expecter) Update(ctx interface{}, in interface{}, opts ...interface{}) *MockPluginsServiceClient_Update_Call {
	return &MockPluginsServiceClient_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockPluginsServiceClient_Update_Call) Run(run func(ctx context.Context, in *plugins.Plugin, opts ...grpc.CallOption)) *MockPluginsServiceClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*plugins.Plugin), variadicArgs...)
	})
	return _c
}

func (_c *MockPluginsServiceClient_Update_Call) Return(_a0 *plugins.Plugin, _a1 error) *MockPluginsServiceClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPluginsServiceClient_Update_Call) RunAndReturn(run func(context.Context, *plugins.Plugin, ...grpc.CallOption) (*plugins.Plugin, error)) *MockPluginsServiceClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPluginsServiceClient creates a new instance of MockPluginsServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPluginsServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPluginsServiceClient {
	mock := &MockPluginsServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
