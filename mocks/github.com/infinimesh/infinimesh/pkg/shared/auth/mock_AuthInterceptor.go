// Code generated by mockery v2.40.1. DO NOT EDIT.

package auth_mocks

import (
	context "context"

	connect "connectrpc.com/connect"

	mock "github.com/stretchr/testify/mock"

	sessions "github.com/infinimesh/infinimesh/pkg/sessions"
)

// MockAuthInterceptor is an autogenerated mock type for the AuthInterceptor type
type MockAuthInterceptor struct {
	mock.Mock
}

type MockAuthInterceptor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthInterceptor) EXPECT() *MockAuthInterceptor_Expecter {
	return &MockAuthInterceptor_Expecter{mock: &_m.Mock}
}

// ConnectDeviceAuthMiddleware provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockAuthInterceptor) ConnectDeviceAuthMiddleware(_a0 context.Context, _a1 []byte, _a2 string) (context.Context, bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ConnectDeviceAuthMiddleware")
	}

	var r0 context.Context
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) (context.Context, bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) context.Context); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) bool); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthInterceptor_ConnectDeviceAuthMiddleware_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectDeviceAuthMiddleware'
type MockAuthInterceptor_ConnectDeviceAuthMiddleware_Call struct {
	*mock.Call
}

// ConnectDeviceAuthMiddleware is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []byte
//   - _a2 string
func (_e *MockAuthInterceptor_Expecter) ConnectDeviceAuthMiddleware(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockAuthInterceptor_ConnectDeviceAuthMiddleware_Call {
	return &MockAuthInterceptor_ConnectDeviceAuthMiddleware_Call{Call: _e.mock.On("ConnectDeviceAuthMiddleware", _a0, _a1, _a2)}
}

func (_c *MockAuthInterceptor_ConnectDeviceAuthMiddleware_Call) Run(run func(_a0 context.Context, _a1 []byte, _a2 string)) *MockAuthInterceptor_ConnectDeviceAuthMiddleware_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(string))
	})
	return _c
}

func (_c *MockAuthInterceptor_ConnectDeviceAuthMiddleware_Call) Return(_a0 context.Context, _a1 bool, _a2 error) *MockAuthInterceptor_ConnectDeviceAuthMiddleware_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuthInterceptor_ConnectDeviceAuthMiddleware_Call) RunAndReturn(run func(context.Context, []byte, string) (context.Context, bool, error)) *MockAuthInterceptor_ConnectDeviceAuthMiddleware_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectStandardAuthMiddleware provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockAuthInterceptor) ConnectStandardAuthMiddleware(_a0 context.Context, _a1 []byte, _a2 string) (context.Context, bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ConnectStandardAuthMiddleware")
	}

	var r0 context.Context
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) (context.Context, bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) context.Context); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) bool); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthInterceptor_ConnectStandardAuthMiddleware_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectStandardAuthMiddleware'
type MockAuthInterceptor_ConnectStandardAuthMiddleware_Call struct {
	*mock.Call
}

// ConnectStandardAuthMiddleware is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []byte
//   - _a2 string
func (_e *MockAuthInterceptor_Expecter) ConnectStandardAuthMiddleware(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockAuthInterceptor_ConnectStandardAuthMiddleware_Call {
	return &MockAuthInterceptor_ConnectStandardAuthMiddleware_Call{Call: _e.mock.On("ConnectStandardAuthMiddleware", _a0, _a1, _a2)}
}

func (_c *MockAuthInterceptor_ConnectStandardAuthMiddleware_Call) Run(run func(_a0 context.Context, _a1 []byte, _a2 string)) *MockAuthInterceptor_ConnectStandardAuthMiddleware_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(string))
	})
	return _c
}

func (_c *MockAuthInterceptor_ConnectStandardAuthMiddleware_Call) Return(_a0 context.Context, _a1 bool, _a2 error) *MockAuthInterceptor_ConnectStandardAuthMiddleware_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuthInterceptor_ConnectStandardAuthMiddleware_Call) RunAndReturn(run func(context.Context, []byte, string) (context.Context, bool, error)) *MockAuthInterceptor_ConnectStandardAuthMiddleware_Call {
	_c.Call.Return(run)
	return _c
}

// MakeToken provides a mock function with given fields: _a0
func (_m *MockAuthInterceptor) MakeToken(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MakeToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthInterceptor_MakeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeToken'
type MockAuthInterceptor_MakeToken_Call struct {
	*mock.Call
}

// MakeToken is a helper method to define mock.On call
//   - _a0 string
func (_e *MockAuthInterceptor_Expecter) MakeToken(_a0 interface{}) *MockAuthInterceptor_MakeToken_Call {
	return &MockAuthInterceptor_MakeToken_Call{Call: _e.mock.On("MakeToken", _a0)}
}

func (_c *MockAuthInterceptor_MakeToken_Call) Run(run func(_a0 string)) *MockAuthInterceptor_MakeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthInterceptor_MakeToken_Call) Return(_a0 string, _a1 error) *MockAuthInterceptor_MakeToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthInterceptor_MakeToken_Call) RunAndReturn(run func(string) (string, error)) *MockAuthInterceptor_MakeToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetSessionsHandler provides a mock function with given fields: _a0
func (_m *MockAuthInterceptor) SetSessionsHandler(_a0 sessions.SessionsHandler) {
	_m.Called(_a0)
}

// MockAuthInterceptor_SetSessionsHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSessionsHandler'
type MockAuthInterceptor_SetSessionsHandler_Call struct {
	*mock.Call
}

// SetSessionsHandler is a helper method to define mock.On call
//   - _a0 sessions.SessionsHandler
func (_e *MockAuthInterceptor_Expecter) SetSessionsHandler(_a0 interface{}) *MockAuthInterceptor_SetSessionsHandler_Call {
	return &MockAuthInterceptor_SetSessionsHandler_Call{Call: _e.mock.On("SetSessionsHandler", _a0)}
}

func (_c *MockAuthInterceptor_SetSessionsHandler_Call) Run(run func(_a0 sessions.SessionsHandler)) *MockAuthInterceptor_SetSessionsHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sessions.SessionsHandler))
	})
	return _c
}

func (_c *MockAuthInterceptor_SetSessionsHandler_Call) Return() *MockAuthInterceptor_SetSessionsHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthInterceptor_SetSessionsHandler_Call) RunAndReturn(run func(sessions.SessionsHandler)) *MockAuthInterceptor_SetSessionsHandler_Call {
	_c.Call.Return(run)
	return _c
}

// WrapStreamingClient provides a mock function with given fields: _a0
func (_m *MockAuthInterceptor) WrapStreamingClient(_a0 connect.StreamingClientFunc) connect.StreamingClientFunc {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WrapStreamingClient")
	}

	var r0 connect.StreamingClientFunc
	if rf, ok := ret.Get(0).(func(connect.StreamingClientFunc) connect.StreamingClientFunc); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connect.StreamingClientFunc)
		}
	}

	return r0
}

// MockAuthInterceptor_WrapStreamingClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WrapStreamingClient'
type MockAuthInterceptor_WrapStreamingClient_Call struct {
	*mock.Call
}

// WrapStreamingClient is a helper method to define mock.On call
//   - _a0 connect.StreamingClientFunc
func (_e *MockAuthInterceptor_Expecter) WrapStreamingClient(_a0 interface{}) *MockAuthInterceptor_WrapStreamingClient_Call {
	return &MockAuthInterceptor_WrapStreamingClient_Call{Call: _e.mock.On("WrapStreamingClient", _a0)}
}

func (_c *MockAuthInterceptor_WrapStreamingClient_Call) Run(run func(_a0 connect.StreamingClientFunc)) *MockAuthInterceptor_WrapStreamingClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(connect.StreamingClientFunc))
	})
	return _c
}

func (_c *MockAuthInterceptor_WrapStreamingClient_Call) Return(_a0 connect.StreamingClientFunc) *MockAuthInterceptor_WrapStreamingClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthInterceptor_WrapStreamingClient_Call) RunAndReturn(run func(connect.StreamingClientFunc) connect.StreamingClientFunc) *MockAuthInterceptor_WrapStreamingClient_Call {
	_c.Call.Return(run)
	return _c
}

// WrapStreamingHandler provides a mock function with given fields: _a0
func (_m *MockAuthInterceptor) WrapStreamingHandler(_a0 connect.StreamingHandlerFunc) connect.StreamingHandlerFunc {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WrapStreamingHandler")
	}

	var r0 connect.StreamingHandlerFunc
	if rf, ok := ret.Get(0).(func(connect.StreamingHandlerFunc) connect.StreamingHandlerFunc); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connect.StreamingHandlerFunc)
		}
	}

	return r0
}

// MockAuthInterceptor_WrapStreamingHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WrapStreamingHandler'
type MockAuthInterceptor_WrapStreamingHandler_Call struct {
	*mock.Call
}

// WrapStreamingHandler is a helper method to define mock.On call
//   - _a0 connect.StreamingHandlerFunc
func (_e *MockAuthInterceptor_Expecter) WrapStreamingHandler(_a0 interface{}) *MockAuthInterceptor_WrapStreamingHandler_Call {
	return &MockAuthInterceptor_WrapStreamingHandler_Call{Call: _e.mock.On("WrapStreamingHandler", _a0)}
}

func (_c *MockAuthInterceptor_WrapStreamingHandler_Call) Run(run func(_a0 connect.StreamingHandlerFunc)) *MockAuthInterceptor_WrapStreamingHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(connect.StreamingHandlerFunc))
	})
	return _c
}

func (_c *MockAuthInterceptor_WrapStreamingHandler_Call) Return(_a0 connect.StreamingHandlerFunc) *MockAuthInterceptor_WrapStreamingHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthInterceptor_WrapStreamingHandler_Call) RunAndReturn(run func(connect.StreamingHandlerFunc) connect.StreamingHandlerFunc) *MockAuthInterceptor_WrapStreamingHandler_Call {
	_c.Call.Return(run)
	return _c
}

// WrapUnary provides a mock function with given fields: _a0
func (_m *MockAuthInterceptor) WrapUnary(_a0 connect.UnaryFunc) connect.UnaryFunc {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WrapUnary")
	}

	var r0 connect.UnaryFunc
	if rf, ok := ret.Get(0).(func(connect.UnaryFunc) connect.UnaryFunc); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connect.UnaryFunc)
		}
	}

	return r0
}

// MockAuthInterceptor_WrapUnary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WrapUnary'
type MockAuthInterceptor_WrapUnary_Call struct {
	*mock.Call
}

// WrapUnary is a helper method to define mock.On call
//   - _a0 connect.UnaryFunc
func (_e *MockAuthInterceptor_Expecter) WrapUnary(_a0 interface{}) *MockAuthInterceptor_WrapUnary_Call {
	return &MockAuthInterceptor_WrapUnary_Call{Call: _e.mock.On("WrapUnary", _a0)}
}

func (_c *MockAuthInterceptor_WrapUnary_Call) Run(run func(_a0 connect.UnaryFunc)) *MockAuthInterceptor_WrapUnary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(connect.UnaryFunc))
	})
	return _c
}

func (_c *MockAuthInterceptor_WrapUnary_Call) Return(_a0 connect.UnaryFunc) *MockAuthInterceptor_WrapUnary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthInterceptor_WrapUnary_Call) RunAndReturn(run func(connect.UnaryFunc) connect.UnaryFunc) *MockAuthInterceptor_WrapUnary_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthInterceptor creates a new instance of MockAuthInterceptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthInterceptor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthInterceptor {
	mock := &MockAuthInterceptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
