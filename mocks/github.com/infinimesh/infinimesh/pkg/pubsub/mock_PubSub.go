// Code generated by mockery v2.42.0. DO NOT EDIT.

package pubsub_mocks

import mock "github.com/stretchr/testify/mock"

// MockPubSub is an autogenerated mock type for the PubSub type
type MockPubSub struct {
	mock.Mock
}

type MockPubSub_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPubSub) EXPECT() *MockPubSub_Expecter {
	return &MockPubSub_Expecter{mock: &_m.Mock}
}

// AddSub provides a mock function with given fields: ch, topics
func (_m *MockPubSub) AddSub(ch chan interface{}, topics ...string) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ch)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockPubSub_AddSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSub'
type MockPubSub_AddSub_Call struct {
	*mock.Call
}

// AddSub is a helper method to define mock.On call
//   - ch chan interface{}
//   - topics ...string
func (_e *MockPubSub_Expecter) AddSub(ch interface{}, topics ...interface{}) *MockPubSub_AddSub_Call {
	return &MockPubSub_AddSub_Call{Call: _e.mock.On("AddSub",
		append([]interface{}{ch}, topics...)...)}
}

func (_c *MockPubSub_AddSub_Call) Run(run func(ch chan interface{}, topics ...string)) *MockPubSub_AddSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(chan interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockPubSub_AddSub_Call) Return() *MockPubSub_AddSub_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSub_AddSub_Call) RunAndReturn(run func(chan interface{}, ...string)) *MockPubSub_AddSub_Call {
	_c.Call.Return(run)
	return _c
}

// AddSubOnceEach provides a mock function with given fields: ch, topics
func (_m *MockPubSub) AddSubOnceEach(ch chan interface{}, topics ...string) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ch)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockPubSub_AddSubOnceEach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSubOnceEach'
type MockPubSub_AddSubOnceEach_Call struct {
	*mock.Call
}

// AddSubOnceEach is a helper method to define mock.On call
//   - ch chan interface{}
//   - topics ...string
func (_e *MockPubSub_Expecter) AddSubOnceEach(ch interface{}, topics ...interface{}) *MockPubSub_AddSubOnceEach_Call {
	return &MockPubSub_AddSubOnceEach_Call{Call: _e.mock.On("AddSubOnceEach",
		append([]interface{}{ch}, topics...)...)}
}

func (_c *MockPubSub_AddSubOnceEach_Call) Run(run func(ch chan interface{}, topics ...string)) *MockPubSub_AddSubOnceEach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(chan interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockPubSub_AddSubOnceEach_Call) Return() *MockPubSub_AddSubOnceEach_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSub_AddSubOnceEach_Call) RunAndReturn(run func(chan interface{}, ...string)) *MockPubSub_AddSubOnceEach_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: topics
func (_m *MockPubSub) Close(topics ...string) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockPubSub_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockPubSub_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - topics ...string
func (_e *MockPubSub_Expecter) Close(topics ...interface{}) *MockPubSub_Close_Call {
	return &MockPubSub_Close_Call{Call: _e.mock.On("Close",
		append([]interface{}{}, topics...)...)}
}

func (_c *MockPubSub_Close_Call) Run(run func(topics ...string)) *MockPubSub_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockPubSub_Close_Call) Return() *MockPubSub_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSub_Close_Call) RunAndReturn(run func(...string)) *MockPubSub_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Pub provides a mock function with given fields: msg, topics
func (_m *MockPubSub) Pub(msg interface{}, topics ...string) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockPubSub_Pub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pub'
type MockPubSub_Pub_Call struct {
	*mock.Call
}

// Pub is a helper method to define mock.On call
//   - msg interface{}
//   - topics ...string
func (_e *MockPubSub_Expecter) Pub(msg interface{}, topics ...interface{}) *MockPubSub_Pub_Call {
	return &MockPubSub_Pub_Call{Call: _e.mock.On("Pub",
		append([]interface{}{msg}, topics...)...)}
}

func (_c *MockPubSub_Pub_Call) Run(run func(msg interface{}, topics ...string)) *MockPubSub_Pub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockPubSub_Pub_Call) Return() *MockPubSub_Pub_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSub_Pub_Call) RunAndReturn(run func(interface{}, ...string)) *MockPubSub_Pub_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *MockPubSub) Shutdown() {
	_m.Called()
}

// MockPubSub_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockPubSub_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockPubSub_Expecter) Shutdown() *MockPubSub_Shutdown_Call {
	return &MockPubSub_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockPubSub_Shutdown_Call) Run(run func()) *MockPubSub_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSub_Shutdown_Call) Return() *MockPubSub_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSub_Shutdown_Call) RunAndReturn(run func()) *MockPubSub_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Sub provides a mock function with given fields: topics
func (_m *MockPubSub) Sub(topics ...string) chan interface{} {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sub")
	}

	var r0 chan interface{}
	if rf, ok := ret.Get(0).(func(...string) chan interface{}); ok {
		r0 = rf(topics...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan interface{})
		}
	}

	return r0
}

// MockPubSub_Sub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sub'
type MockPubSub_Sub_Call struct {
	*mock.Call
}

// Sub is a helper method to define mock.On call
//   - topics ...string
func (_e *MockPubSub_Expecter) Sub(topics ...interface{}) *MockPubSub_Sub_Call {
	return &MockPubSub_Sub_Call{Call: _e.mock.On("Sub",
		append([]interface{}{}, topics...)...)}
}

func (_c *MockPubSub_Sub_Call) Run(run func(topics ...string)) *MockPubSub_Sub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockPubSub_Sub_Call) Return(_a0 chan interface{}) *MockPubSub_Sub_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSub_Sub_Call) RunAndReturn(run func(...string) chan interface{}) *MockPubSub_Sub_Call {
	_c.Call.Return(run)
	return _c
}

// SubOnce provides a mock function with given fields: topics
func (_m *MockPubSub) SubOnce(topics ...string) chan interface{} {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubOnce")
	}

	var r0 chan interface{}
	if rf, ok := ret.Get(0).(func(...string) chan interface{}); ok {
		r0 = rf(topics...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan interface{})
		}
	}

	return r0
}

// MockPubSub_SubOnce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubOnce'
type MockPubSub_SubOnce_Call struct {
	*mock.Call
}

// SubOnce is a helper method to define mock.On call
//   - topics ...string
func (_e *MockPubSub_Expecter) SubOnce(topics ...interface{}) *MockPubSub_SubOnce_Call {
	return &MockPubSub_SubOnce_Call{Call: _e.mock.On("SubOnce",
		append([]interface{}{}, topics...)...)}
}

func (_c *MockPubSub_SubOnce_Call) Run(run func(topics ...string)) *MockPubSub_SubOnce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockPubSub_SubOnce_Call) Return(_a0 chan interface{}) *MockPubSub_SubOnce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSub_SubOnce_Call) RunAndReturn(run func(...string) chan interface{}) *MockPubSub_SubOnce_Call {
	_c.Call.Return(run)
	return _c
}

// SubOnceEach provides a mock function with given fields: topics
func (_m *MockPubSub) SubOnceEach(topics ...string) chan interface{} {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubOnceEach")
	}

	var r0 chan interface{}
	if rf, ok := ret.Get(0).(func(...string) chan interface{}); ok {
		r0 = rf(topics...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan interface{})
		}
	}

	return r0
}

// MockPubSub_SubOnceEach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubOnceEach'
type MockPubSub_SubOnceEach_Call struct {
	*mock.Call
}

// SubOnceEach is a helper method to define mock.On call
//   - topics ...string
func (_e *MockPubSub_Expecter) SubOnceEach(topics ...interface{}) *MockPubSub_SubOnceEach_Call {
	return &MockPubSub_SubOnceEach_Call{Call: _e.mock.On("SubOnceEach",
		append([]interface{}{}, topics...)...)}
}

func (_c *MockPubSub_SubOnceEach_Call) Run(run func(topics ...string)) *MockPubSub_SubOnceEach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockPubSub_SubOnceEach_Call) Return(_a0 chan interface{}) *MockPubSub_SubOnceEach_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSub_SubOnceEach_Call) RunAndReturn(run func(...string) chan interface{}) *MockPubSub_SubOnceEach_Call {
	_c.Call.Return(run)
	return _c
}

// TryPub provides a mock function with given fields: msg, topics
func (_m *MockPubSub) TryPub(msg interface{}, topics ...string) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockPubSub_TryPub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryPub'
type MockPubSub_TryPub_Call struct {
	*mock.Call
}

// TryPub is a helper method to define mock.On call
//   - msg interface{}
//   - topics ...string
func (_e *MockPubSub_Expecter) TryPub(msg interface{}, topics ...interface{}) *MockPubSub_TryPub_Call {
	return &MockPubSub_TryPub_Call{Call: _e.mock.On("TryPub",
		append([]interface{}{msg}, topics...)...)}
}

func (_c *MockPubSub_TryPub_Call) Run(run func(msg interface{}, topics ...string)) *MockPubSub_TryPub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockPubSub_TryPub_Call) Return() *MockPubSub_TryPub_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSub_TryPub_Call) RunAndReturn(run func(interface{}, ...string)) *MockPubSub_TryPub_Call {
	_c.Call.Return(run)
	return _c
}

// Unsub provides a mock function with given fields: ch, topics
func (_m *MockPubSub) Unsub(ch chan interface{}, topics ...string) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ch)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockPubSub_Unsub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsub'
type MockPubSub_Unsub_Call struct {
	*mock.Call
}

// Unsub is a helper method to define mock.On call
//   - ch chan interface{}
//   - topics ...string
func (_e *MockPubSub_Expecter) Unsub(ch interface{}, topics ...interface{}) *MockPubSub_Unsub_Call {
	return &MockPubSub_Unsub_Call{Call: _e.mock.On("Unsub",
		append([]interface{}{ch}, topics...)...)}
}

func (_c *MockPubSub_Unsub_Call) Run(run func(ch chan interface{}, topics ...string)) *MockPubSub_Unsub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(chan interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockPubSub_Unsub_Call) Return() *MockPubSub_Unsub_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSub_Unsub_Call) RunAndReturn(run func(chan interface{}, ...string)) *MockPubSub_Unsub_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPubSub creates a new instance of MockPubSub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPubSub(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPubSub {
	mock := &MockPubSub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
