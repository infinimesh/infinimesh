// Code generated by mockery v2.40.1. DO NOT EDIT.

package sessions

import (
	nodesessions "github.com/infinimesh/proto/node/sessions"
	mock "github.com/stretchr/testify/mock"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MockSessionsHandler is an autogenerated mock type for the SessionsHandler type
type MockSessionsHandler struct {
	mock.Mock
}

type MockSessionsHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionsHandler) EXPECT() *MockSessionsHandler_Expecter {
	return &MockSessionsHandler_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: account, sid
func (_m *MockSessionsHandler) Check(account string, sid string) error {
	ret := _m.Called(account, sid)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(account, sid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionsHandler_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockSessionsHandler_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - account string
//   - sid string
func (_e *MockSessionsHandler_Expecter) Check(account interface{}, sid interface{}) *MockSessionsHandler_Check_Call {
	return &MockSessionsHandler_Check_Call{Call: _e.mock.On("Check", account, sid)}
}

func (_c *MockSessionsHandler_Check_Call) Run(run func(account string, sid string)) *MockSessionsHandler_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockSessionsHandler_Check_Call) Return(_a0 error) *MockSessionsHandler_Check_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionsHandler_Check_Call) RunAndReturn(run func(string, string) error) *MockSessionsHandler_Check_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: account
func (_m *MockSessionsHandler) Get(account string) ([]*nodesessions.Session, error) {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*nodesessions.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*nodesessions.Session, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(string) []*nodesessions.Session); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*nodesessions.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionsHandler_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionsHandler_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - account string
func (_e *MockSessionsHandler_Expecter) Get(account interface{}) *MockSessionsHandler_Get_Call {
	return &MockSessionsHandler_Get_Call{Call: _e.mock.On("Get", account)}
}

func (_c *MockSessionsHandler_Get_Call) Run(run func(account string)) *MockSessionsHandler_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionsHandler_Get_Call) Return(_a0 []*nodesessions.Session, _a1 error) *MockSessionsHandler_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionsHandler_Get_Call) RunAndReturn(run func(string) ([]*nodesessions.Session, error)) *MockSessionsHandler_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetActivity provides a mock function with given fields: account
func (_m *MockSessionsHandler) GetActivity(account string) (map[string]*timestamppb.Timestamp, error) {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for GetActivity")
	}

	var r0 map[string]*timestamppb.Timestamp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]*timestamppb.Timestamp, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]*timestamppb.Timestamp); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*timestamppb.Timestamp)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionsHandler_GetActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivity'
type MockSessionsHandler_GetActivity_Call struct {
	*mock.Call
}

// GetActivity is a helper method to define mock.On call
//   - account string
func (_e *MockSessionsHandler_Expecter) GetActivity(account interface{}) *MockSessionsHandler_GetActivity_Call {
	return &MockSessionsHandler_GetActivity_Call{Call: _e.mock.On("GetActivity", account)}
}

func (_c *MockSessionsHandler_GetActivity_Call) Run(run func(account string)) *MockSessionsHandler_GetActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionsHandler_GetActivity_Call) Return(_a0 map[string]*timestamppb.Timestamp, _a1 error) *MockSessionsHandler_GetActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionsHandler_GetActivity_Call) RunAndReturn(run func(string) (map[string]*timestamppb.Timestamp, error)) *MockSessionsHandler_GetActivity_Call {
	_c.Call.Return(run)
	return _c
}

// LogActivity provides a mock function with given fields: account, sid, exp
func (_m *MockSessionsHandler) LogActivity(account string, sid string, exp int64) error {
	ret := _m.Called(account, sid, exp)

	if len(ret) == 0 {
		panic("no return value specified for LogActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int64) error); ok {
		r0 = rf(account, sid, exp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionsHandler_LogActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogActivity'
type MockSessionsHandler_LogActivity_Call struct {
	*mock.Call
}

// LogActivity is a helper method to define mock.On call
//   - account string
//   - sid string
//   - exp int64
func (_e *MockSessionsHandler_Expecter) LogActivity(account interface{}, sid interface{}, exp interface{}) *MockSessionsHandler_LogActivity_Call {
	return &MockSessionsHandler_LogActivity_Call{Call: _e.mock.On("LogActivity", account, sid, exp)}
}

func (_c *MockSessionsHandler_LogActivity_Call) Run(run func(account string, sid string, exp int64)) *MockSessionsHandler_LogActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockSessionsHandler_LogActivity_Call) Return(_a0 error) *MockSessionsHandler_LogActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionsHandler_LogActivity_Call) RunAndReturn(run func(string, string, int64) error) *MockSessionsHandler_LogActivity_Call {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: exp, client
func (_m *MockSessionsHandler) New(exp int64, client string) *nodesessions.Session {
	ret := _m.Called(exp, client)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 *nodesessions.Session
	if rf, ok := ret.Get(0).(func(int64, string) *nodesessions.Session); ok {
		r0 = rf(exp, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nodesessions.Session)
		}
	}

	return r0
}

// MockSessionsHandler_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type MockSessionsHandler_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - exp int64
//   - client string
func (_e *MockSessionsHandler_Expecter) New(exp interface{}, client interface{}) *MockSessionsHandler_New_Call {
	return &MockSessionsHandler_New_Call{Call: _e.mock.On("New", exp, client)}
}

func (_c *MockSessionsHandler_New_Call) Run(run func(exp int64, client string)) *MockSessionsHandler_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockSessionsHandler_New_Call) Return(_a0 *nodesessions.Session) *MockSessionsHandler_New_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionsHandler_New_Call) RunAndReturn(run func(int64, string) *nodesessions.Session) *MockSessionsHandler_New_Call {
	_c.Call.Return(run)
	return _c
}

// Revoke provides a mock function with given fields: account, sid
func (_m *MockSessionsHandler) Revoke(account string, sid string) error {
	ret := _m.Called(account, sid)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(account, sid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionsHandler_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type MockSessionsHandler_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//   - account string
//   - sid string
func (_e *MockSessionsHandler_Expecter) Revoke(account interface{}, sid interface{}) *MockSessionsHandler_Revoke_Call {
	return &MockSessionsHandler_Revoke_Call{Call: _e.mock.On("Revoke", account, sid)}
}

func (_c *MockSessionsHandler_Revoke_Call) Run(run func(account string, sid string)) *MockSessionsHandler_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockSessionsHandler_Revoke_Call) Return(_a0 error) *MockSessionsHandler_Revoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionsHandler_Revoke_Call) RunAndReturn(run func(string, string) error) *MockSessionsHandler_Revoke_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: account, session
func (_m *MockSessionsHandler) Store(account string, session *nodesessions.Session) error {
	ret := _m.Called(account, session)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *nodesessions.Session) error); ok {
		r0 = rf(account, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionsHandler_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockSessionsHandler_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - account string
//   - session *nodesessions.Session
func (_e *MockSessionsHandler_Expecter) Store(account interface{}, session interface{}) *MockSessionsHandler_Store_Call {
	return &MockSessionsHandler_Store_Call{Call: _e.mock.On("Store", account, session)}
}

func (_c *MockSessionsHandler_Store_Call) Run(run func(account string, session *nodesessions.Session)) *MockSessionsHandler_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*nodesessions.Session))
	})
	return _c
}

func (_c *MockSessionsHandler_Store_Call) Return(_a0 error) *MockSessionsHandler_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionsHandler_Store_Call) RunAndReturn(run func(string, *nodesessions.Session) error) *MockSessionsHandler_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionsHandler creates a new instance of MockSessionsHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionsHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionsHandler {
	mock := &MockSessionsHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
