// Code generated by mockery v2.40.1. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	graph "github.com/infinimesh/infinimesh/pkg/graph"
	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// MockInfinimeshGenericActionsRepo is an autogenerated mock type for the InfinimeshGenericActionsRepo type
type MockInfinimeshGenericActionsRepo[T graph.InfinimeshProtobufEntity] struct {
	mock.Mock
}

type MockInfinimeshGenericActionsRepo_Expecter[T graph.InfinimeshProtobufEntity] struct {
	mock *mock.Mock
}

func (_m *MockInfinimeshGenericActionsRepo[T]) EXPECT() *MockInfinimeshGenericActionsRepo_Expecter[T] {
	return &MockInfinimeshGenericActionsRepo_Expecter[T]{mock: &_m.Mock}
}

// ListQuery provides a mock function with given fields: ctx, log, from
func (_m *MockInfinimeshGenericActionsRepo[T]) ListQuery(ctx context.Context, log *zap.Logger, from graph.InfinimeshGraphNode) (*graph.ListQueryResult[T], error) {
	ret := _m.Called(ctx, log, from)

	if len(ret) == 0 {
		panic("no return value specified for ListQuery")
	}

	var r0 *graph.ListQueryResult[T]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, graph.InfinimeshGraphNode) (*graph.ListQueryResult[T], error)); ok {
		return rf(ctx, log, from)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, graph.InfinimeshGraphNode) *graph.ListQueryResult[T]); ok {
		r0 = rf(ctx, log, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.ListQueryResult[T])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *zap.Logger, graph.InfinimeshGraphNode) error); ok {
		r1 = rf(ctx, log, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInfinimeshGenericActionsRepo_ListQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListQuery'
type MockInfinimeshGenericActionsRepo_ListQuery_Call[T graph.InfinimeshProtobufEntity] struct {
	*mock.Call
}

// ListQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - log *zap.Logger
//   - from graph.InfinimeshGraphNode
func (_e *MockInfinimeshGenericActionsRepo_Expecter[T]) ListQuery(ctx interface{}, log interface{}, from interface{}) *MockInfinimeshGenericActionsRepo_ListQuery_Call[T] {
	return &MockInfinimeshGenericActionsRepo_ListQuery_Call[T]{Call: _e.mock.On("ListQuery", ctx, log, from)}
}

func (_c *MockInfinimeshGenericActionsRepo_ListQuery_Call[T]) Run(run func(ctx context.Context, log *zap.Logger, from graph.InfinimeshGraphNode)) *MockInfinimeshGenericActionsRepo_ListQuery_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*zap.Logger), args[2].(graph.InfinimeshGraphNode))
	})
	return _c
}

func (_c *MockInfinimeshGenericActionsRepo_ListQuery_Call[T]) Return(_a0 *graph.ListQueryResult[T], _a1 error) *MockInfinimeshGenericActionsRepo_ListQuery_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInfinimeshGenericActionsRepo_ListQuery_Call[T]) RunAndReturn(run func(context.Context, *zap.Logger, graph.InfinimeshGraphNode) (*graph.ListQueryResult[T], error)) *MockInfinimeshGenericActionsRepo_ListQuery_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockInfinimeshGenericActionsRepo creates a new instance of MockInfinimeshGenericActionsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInfinimeshGenericActionsRepo[T graph.InfinimeshProtobufEntity](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInfinimeshGenericActionsRepo[T] {
	mock := &MockInfinimeshGenericActionsRepo[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
