// Code generated by mockery v2.42.0. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	graph "github.com/infinimesh/infinimesh/pkg/graph"
	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// MockInfinimeshGenericActionsRepo is an autogenerated mock type for the InfinimeshGenericActionsRepo type
type MockInfinimeshGenericActionsRepo[T graph.InfinimeshProtobufEntity] struct {
	mock.Mock
}

type MockInfinimeshGenericActionsRepo_Expecter[T graph.InfinimeshProtobufEntity] struct {
	mock *mock.Mock
}

func (_m *MockInfinimeshGenericActionsRepo[T]) EXPECT() *MockInfinimeshGenericActionsRepo_Expecter[T] {
	return &MockInfinimeshGenericActionsRepo_Expecter[T]{mock: &_m.Mock}
}

// ListQuery provides a mock function with given fields: ctx, log, from, params
func (_m *MockInfinimeshGenericActionsRepo[T]) ListQuery(ctx context.Context, log *zap.Logger, from graph.InfinimeshGraphNode, params ...string) (*graph.ListQueryResult[T], error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, log, from)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQuery")
	}

	var r0 *graph.ListQueryResult[T]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, graph.InfinimeshGraphNode, ...string) (*graph.ListQueryResult[T], error)); ok {
		return rf(ctx, log, from, params...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, graph.InfinimeshGraphNode, ...string) *graph.ListQueryResult[T]); ok {
		r0 = rf(ctx, log, from, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.ListQueryResult[T])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *zap.Logger, graph.InfinimeshGraphNode, ...string) error); ok {
		r1 = rf(ctx, log, from, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInfinimeshGenericActionsRepo_ListQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListQuery'
type MockInfinimeshGenericActionsRepo_ListQuery_Call[T graph.InfinimeshProtobufEntity] struct {
	*mock.Call
}

// ListQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - log *zap.Logger
//   - from graph.InfinimeshGraphNode
//   - params ...string
func (_e *MockInfinimeshGenericActionsRepo_Expecter[T]) ListQuery(ctx interface{}, log interface{}, from interface{}, params ...interface{}) *MockInfinimeshGenericActionsRepo_ListQuery_Call[T] {
	return &MockInfinimeshGenericActionsRepo_ListQuery_Call[T]{Call: _e.mock.On("ListQuery",
		append([]interface{}{ctx, log, from}, params...)...)}
}

func (_c *MockInfinimeshGenericActionsRepo_ListQuery_Call[T]) Run(run func(ctx context.Context, log *zap.Logger, from graph.InfinimeshGraphNode, params ...string)) *MockInfinimeshGenericActionsRepo_ListQuery_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(*zap.Logger), args[2].(graph.InfinimeshGraphNode), variadicArgs...)
	})
	return _c
}

func (_c *MockInfinimeshGenericActionsRepo_ListQuery_Call[T]) Return(_a0 *graph.ListQueryResult[T], _a1 error) *MockInfinimeshGenericActionsRepo_ListQuery_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInfinimeshGenericActionsRepo_ListQuery_Call[T]) RunAndReturn(run func(context.Context, *zap.Logger, graph.InfinimeshGraphNode, ...string) (*graph.ListQueryResult[T], error)) *MockInfinimeshGenericActionsRepo_ListQuery_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UpdateDeviceModifyDate provides a mock function with given fields: ctx, log, uuid
func (_m *MockInfinimeshGenericActionsRepo[T]) UpdateDeviceModifyDate(ctx context.Context, log *zap.Logger, uuid string) error {
	ret := _m.Called(ctx, log, uuid)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceModifyDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, string) error); ok {
		r0 = rf(ctx, log, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInfinimeshGenericActionsRepo_UpdateDeviceModifyDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeviceModifyDate'
type MockInfinimeshGenericActionsRepo_UpdateDeviceModifyDate_Call[T graph.InfinimeshProtobufEntity] struct {
	*mock.Call
}

// UpdateDeviceModifyDate is a helper method to define mock.On call
//   - ctx context.Context
//   - log *zap.Logger
//   - uuid string
func (_e *MockInfinimeshGenericActionsRepo_Expecter[T]) UpdateDeviceModifyDate(ctx interface{}, log interface{}, uuid interface{}) *MockInfinimeshGenericActionsRepo_UpdateDeviceModifyDate_Call[T] {
	return &MockInfinimeshGenericActionsRepo_UpdateDeviceModifyDate_Call[T]{Call: _e.mock.On("UpdateDeviceModifyDate", ctx, log, uuid)}
}

func (_c *MockInfinimeshGenericActionsRepo_UpdateDeviceModifyDate_Call[T]) Run(run func(ctx context.Context, log *zap.Logger, uuid string)) *MockInfinimeshGenericActionsRepo_UpdateDeviceModifyDate_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*zap.Logger), args[2].(string))
	})
	return _c
}

func (_c *MockInfinimeshGenericActionsRepo_UpdateDeviceModifyDate_Call[T]) Return(_a0 error) *MockInfinimeshGenericActionsRepo_UpdateDeviceModifyDate_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfinimeshGenericActionsRepo_UpdateDeviceModifyDate_Call[T]) RunAndReturn(run func(context.Context, *zap.Logger, string) error) *MockInfinimeshGenericActionsRepo_UpdateDeviceModifyDate_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockInfinimeshGenericActionsRepo creates a new instance of MockInfinimeshGenericActionsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInfinimeshGenericActionsRepo[T graph.InfinimeshProtobufEntity](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInfinimeshGenericActionsRepo[T] {
	mock := &MockInfinimeshGenericActionsRepo[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
