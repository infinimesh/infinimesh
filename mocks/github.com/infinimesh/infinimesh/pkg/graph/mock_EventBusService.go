// Code generated by mockery v2.40.1. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	eventbus "github.com/infinimesh/proto/eventbus"

	mock "github.com/stretchr/testify/mock"
)

// MockEventBusService is an autogenerated mock type for the EventBusService type
type MockEventBusService struct {
	mock.Mock
}

type MockEventBusService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventBusService) EXPECT() *MockEventBusService_Expecter {
	return &MockEventBusService_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockEventBusService) Notify(_a0 context.Context, _a1 string, _a2 *eventbus.Event) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *eventbus.Event) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBusService_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type MockEventBusService_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 *eventbus.Event
func (_e *MockEventBusService_Expecter) Notify(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockEventBusService_Notify_Call {
	return &MockEventBusService_Notify_Call{Call: _e.mock.On("Notify", _a0, _a1, _a2)}
}

func (_c *MockEventBusService_Notify_Call) Run(run func(_a0 context.Context, _a1 string, _a2 *eventbus.Event)) *MockEventBusService_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*eventbus.Event))
	})
	return _c
}

func (_c *MockEventBusService_Notify_Call) Return(_a0 error) *MockEventBusService_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Notify_Call) RunAndReturn(run func(context.Context, string, *eventbus.Event) error) *MockEventBusService_Notify_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *MockEventBusService) Subscribe(_a0 context.Context, _a1 string) (<-chan eventbus.Event, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan eventbus.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (<-chan eventbus.Event, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan eventbus.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan eventbus.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventBusService_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockEventBusService_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockEventBusService_Expecter) Subscribe(_a0 interface{}, _a1 interface{}) *MockEventBusService_Subscribe_Call {
	return &MockEventBusService_Subscribe_Call{Call: _e.mock.On("Subscribe", _a0, _a1)}
}

func (_c *MockEventBusService_Subscribe_Call) Run(run func(_a0 context.Context, _a1 string)) *MockEventBusService_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEventBusService_Subscribe_Call) Return(_a0 <-chan eventbus.Event, _a1 error) *MockEventBusService_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventBusService_Subscribe_Call) RunAndReturn(run func(context.Context, string) (<-chan eventbus.Event, error)) *MockEventBusService_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventBusService creates a new instance of MockEventBusService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventBusService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventBusService {
	mock := &MockEventBusService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
