// Code generated by mockery v2.42.0. DO NOT EDIT.

package graph_mocks

import (
	driver "github.com/arangodb/go-driver"

	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// MockInfinimeshController is an autogenerated mock type for the InfinimeshController type
type MockInfinimeshController struct {
	mock.Mock
}

type MockInfinimeshController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInfinimeshController) EXPECT() *MockInfinimeshController_Expecter {
	return &MockInfinimeshController_Expecter{mock: &_m.Mock}
}

// DB provides a mock function with given fields:
func (_m *MockInfinimeshController) DB() driver.Database {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DB")
	}

	var r0 driver.Database
	if rf, ok := ret.Get(0).(func() driver.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Database)
		}
	}

	return r0
}

// MockInfinimeshController_DB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DB'
type MockInfinimeshController_DB_Call struct {
	*mock.Call
}

// DB is a helper method to define mock.On call
func (_e *MockInfinimeshController_Expecter) DB() *MockInfinimeshController_DB_Call {
	return &MockInfinimeshController_DB_Call{Call: _e.mock.On("DB")}
}

func (_c *MockInfinimeshController_DB_Call) Run(run func()) *MockInfinimeshController_DB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInfinimeshController_DB_Call) Return(_a0 driver.Database) *MockInfinimeshController_DB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfinimeshController_DB_Call) RunAndReturn(run func() driver.Database) *MockInfinimeshController_DB_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields:
func (_m *MockInfinimeshController) Log() *zap.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 *zap.Logger
	if rf, ok := ret.Get(0).(func() *zap.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	return r0
}

// MockInfinimeshController_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockInfinimeshController_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
func (_e *MockInfinimeshController_Expecter) Log() *MockInfinimeshController_Log_Call {
	return &MockInfinimeshController_Log_Call{Call: _e.mock.On("Log")}
}

func (_c *MockInfinimeshController_Log_Call) Run(run func()) *MockInfinimeshController_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInfinimeshController_Log_Call) Return(_a0 *zap.Logger) *MockInfinimeshController_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfinimeshController_Log_Call) RunAndReturn(run func() *zap.Logger) *MockInfinimeshController_Log_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInfinimeshController creates a new instance of MockInfinimeshController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInfinimeshController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInfinimeshController {
	mock := &MockInfinimeshController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
