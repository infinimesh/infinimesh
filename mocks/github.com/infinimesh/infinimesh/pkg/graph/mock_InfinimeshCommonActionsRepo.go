// Code generated by mockery v2.42.1. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	access "github.com/infinimesh/proto/node/access"

	driver "github.com/arangodb/go-driver"

	graph "github.com/infinimesh/infinimesh/pkg/graph"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/go-redis/redis/v8"
)

// MockInfinimeshCommonActionsRepo is an autogenerated mock type for the InfinimeshCommonActionsRepo type
type MockInfinimeshCommonActionsRepo struct {
	mock.Mock
}

type MockInfinimeshCommonActionsRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInfinimeshCommonActionsRepo) EXPECT() *MockInfinimeshCommonActionsRepo_Expecter {
	return &MockInfinimeshCommonActionsRepo_Expecter{mock: &_m.Mock}
}

// AccessLevel provides a mock function with given fields: ctx, requestor, node
func (_m *MockInfinimeshCommonActionsRepo) AccessLevel(ctx context.Context, requestor graph.InfinimeshGraphNode, node graph.InfinimeshGraphNode) (bool, access.Level) {
	ret := _m.Called(ctx, requestor, node)

	if len(ret) == 0 {
		panic("no return value specified for AccessLevel")
	}

	var r0 bool
	var r1 access.Level
	if rf, ok := ret.Get(0).(func(context.Context, graph.InfinimeshGraphNode, graph.InfinimeshGraphNode) (bool, access.Level)); ok {
		return rf(ctx, requestor, node)
	}
	if rf, ok := ret.Get(0).(func(context.Context, graph.InfinimeshGraphNode, graph.InfinimeshGraphNode) bool); ok {
		r0 = rf(ctx, requestor, node)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, graph.InfinimeshGraphNode, graph.InfinimeshGraphNode) access.Level); ok {
		r1 = rf(ctx, requestor, node)
	} else {
		r1 = ret.Get(1).(access.Level)
	}

	return r0, r1
}

// MockInfinimeshCommonActionsRepo_AccessLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessLevel'
type MockInfinimeshCommonActionsRepo_AccessLevel_Call struct {
	*mock.Call
}

// AccessLevel is a helper method to define mock.On call
//   - ctx context.Context
//   - requestor graph.InfinimeshGraphNode
//   - node graph.InfinimeshGraphNode
func (_e *MockInfinimeshCommonActionsRepo_Expecter) AccessLevel(ctx interface{}, requestor interface{}, node interface{}) *MockInfinimeshCommonActionsRepo_AccessLevel_Call {
	return &MockInfinimeshCommonActionsRepo_AccessLevel_Call{Call: _e.mock.On("AccessLevel", ctx, requestor, node)}
}

func (_c *MockInfinimeshCommonActionsRepo_AccessLevel_Call) Run(run func(ctx context.Context, requestor graph.InfinimeshGraphNode, node graph.InfinimeshGraphNode)) *MockInfinimeshCommonActionsRepo_AccessLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.InfinimeshGraphNode), args[2].(graph.InfinimeshGraphNode))
	})
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_AccessLevel_Call) Return(_a0 bool, _a1 access.Level) *MockInfinimeshCommonActionsRepo_AccessLevel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_AccessLevel_Call) RunAndReturn(run func(context.Context, graph.InfinimeshGraphNode, graph.InfinimeshGraphNode) (bool, access.Level)) *MockInfinimeshCommonActionsRepo_AccessLevel_Call {
	_c.Call.Return(run)
	return _c
}

// AccessLevelAndGet provides a mock function with given fields: ctx, account, node
func (_m *MockInfinimeshCommonActionsRepo) AccessLevelAndGet(ctx context.Context, account *graph.Account, node graph.InfinimeshGraphNode) error {
	ret := _m.Called(ctx, account, node)

	if len(ret) == 0 {
		panic("no return value specified for AccessLevelAndGet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *graph.Account, graph.InfinimeshGraphNode) error); ok {
		r0 = rf(ctx, account, node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInfinimeshCommonActionsRepo_AccessLevelAndGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessLevelAndGet'
type MockInfinimeshCommonActionsRepo_AccessLevelAndGet_Call struct {
	*mock.Call
}

// AccessLevelAndGet is a helper method to define mock.On call
//   - ctx context.Context
//   - account *graph.Account
//   - node graph.InfinimeshGraphNode
func (_e *MockInfinimeshCommonActionsRepo_Expecter) AccessLevelAndGet(ctx interface{}, account interface{}, node interface{}) *MockInfinimeshCommonActionsRepo_AccessLevelAndGet_Call {
	return &MockInfinimeshCommonActionsRepo_AccessLevelAndGet_Call{Call: _e.mock.On("AccessLevelAndGet", ctx, account, node)}
}

func (_c *MockInfinimeshCommonActionsRepo_AccessLevelAndGet_Call) Run(run func(ctx context.Context, account *graph.Account, node graph.InfinimeshGraphNode)) *MockInfinimeshCommonActionsRepo_AccessLevelAndGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*graph.Account), args[2].(graph.InfinimeshGraphNode))
	})
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_AccessLevelAndGet_Call) Return(_a0 error) *MockInfinimeshCommonActionsRepo_AccessLevelAndGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_AccessLevelAndGet_Call) RunAndReturn(run func(context.Context, *graph.Account, graph.InfinimeshGraphNode) error) *MockInfinimeshCommonActionsRepo_AccessLevelAndGet_Call {
	_c.Call.Return(run)
	return _c
}

// CheckLink provides a mock function with given fields: ctx, edge, from, to
func (_m *MockInfinimeshCommonActionsRepo) CheckLink(ctx context.Context, edge driver.Collection, from graph.InfinimeshGraphNode, to graph.InfinimeshGraphNode) bool {
	ret := _m.Called(ctx, edge, from, to)

	if len(ret) == 0 {
		panic("no return value specified for CheckLink")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, driver.Collection, graph.InfinimeshGraphNode, graph.InfinimeshGraphNode) bool); ok {
		r0 = rf(ctx, edge, from, to)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockInfinimeshCommonActionsRepo_CheckLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckLink'
type MockInfinimeshCommonActionsRepo_CheckLink_Call struct {
	*mock.Call
}

// CheckLink is a helper method to define mock.On call
//   - ctx context.Context
//   - edge driver.Collection
//   - from graph.InfinimeshGraphNode
//   - to graph.InfinimeshGraphNode
func (_e *MockInfinimeshCommonActionsRepo_Expecter) CheckLink(ctx interface{}, edge interface{}, from interface{}, to interface{}) *MockInfinimeshCommonActionsRepo_CheckLink_Call {
	return &MockInfinimeshCommonActionsRepo_CheckLink_Call{Call: _e.mock.On("CheckLink", ctx, edge, from, to)}
}

func (_c *MockInfinimeshCommonActionsRepo_CheckLink_Call) Run(run func(ctx context.Context, edge driver.Collection, from graph.InfinimeshGraphNode, to graph.InfinimeshGraphNode)) *MockInfinimeshCommonActionsRepo_CheckLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.Collection), args[2].(graph.InfinimeshGraphNode), args[3].(graph.InfinimeshGraphNode))
	})
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_CheckLink_Call) Return(_a0 bool) *MockInfinimeshCommonActionsRepo_CheckLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_CheckLink_Call) RunAndReturn(run func(context.Context, driver.Collection, graph.InfinimeshGraphNode, graph.InfinimeshGraphNode) bool) *MockInfinimeshCommonActionsRepo_CheckLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRecursive provides a mock function with given fields: ctx, from
func (_m *MockInfinimeshCommonActionsRepo) DeleteRecursive(ctx context.Context, from graph.InfinimeshGraphNode) error {
	ret := _m.Called(ctx, from)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecursive")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.InfinimeshGraphNode) error); ok {
		r0 = rf(ctx, from)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInfinimeshCommonActionsRepo_DeleteRecursive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRecursive'
type MockInfinimeshCommonActionsRepo_DeleteRecursive_Call struct {
	*mock.Call
}

// DeleteRecursive is a helper method to define mock.On call
//   - ctx context.Context
//   - from graph.InfinimeshGraphNode
func (_e *MockInfinimeshCommonActionsRepo_Expecter) DeleteRecursive(ctx interface{}, from interface{}) *MockInfinimeshCommonActionsRepo_DeleteRecursive_Call {
	return &MockInfinimeshCommonActionsRepo_DeleteRecursive_Call{Call: _e.mock.On("DeleteRecursive", ctx, from)}
}

func (_c *MockInfinimeshCommonActionsRepo_DeleteRecursive_Call) Run(run func(ctx context.Context, from graph.InfinimeshGraphNode)) *MockInfinimeshCommonActionsRepo_DeleteRecursive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.InfinimeshGraphNode))
	})
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_DeleteRecursive_Call) Return(_a0 error) *MockInfinimeshCommonActionsRepo_DeleteRecursive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_DeleteRecursive_Call) RunAndReturn(run func(context.Context, graph.InfinimeshGraphNode) error) *MockInfinimeshCommonActionsRepo_DeleteRecursive_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureRootExists provides a mock function with given fields: rdb, passwd
func (_m *MockInfinimeshCommonActionsRepo) EnsureRootExists(rdb *redis.Client, passwd string) error {
	ret := _m.Called(rdb, passwd)

	if len(ret) == 0 {
		panic("no return value specified for EnsureRootExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*redis.Client, string) error); ok {
		r0 = rf(rdb, passwd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInfinimeshCommonActionsRepo_EnsureRootExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureRootExists'
type MockInfinimeshCommonActionsRepo_EnsureRootExists_Call struct {
	*mock.Call
}

// EnsureRootExists is a helper method to define mock.On call
//   - rdb *redis.Client
//   - passwd string
func (_e *MockInfinimeshCommonActionsRepo_Expecter) EnsureRootExists(rdb interface{}, passwd interface{}) *MockInfinimeshCommonActionsRepo_EnsureRootExists_Call {
	return &MockInfinimeshCommonActionsRepo_EnsureRootExists_Call{Call: _e.mock.On("EnsureRootExists", rdb, passwd)}
}

func (_c *MockInfinimeshCommonActionsRepo_EnsureRootExists_Call) Run(run func(rdb *redis.Client, passwd string)) *MockInfinimeshCommonActionsRepo_EnsureRootExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*redis.Client), args[1].(string))
	})
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_EnsureRootExists_Call) Return(err error) *MockInfinimeshCommonActionsRepo_EnsureRootExists_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_EnsureRootExists_Call) RunAndReturn(run func(*redis.Client, string) error) *MockInfinimeshCommonActionsRepo_EnsureRootExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeCol provides a mock function with given fields: ctx, name
func (_m *MockInfinimeshCommonActionsRepo) GetEdgeCol(ctx context.Context, name string) driver.Collection {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeCol")
	}

	var r0 driver.Collection
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.Collection); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Collection)
		}
	}

	return r0
}

// MockInfinimeshCommonActionsRepo_GetEdgeCol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeCol'
type MockInfinimeshCommonActionsRepo_GetEdgeCol_Call struct {
	*mock.Call
}

// GetEdgeCol is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockInfinimeshCommonActionsRepo_Expecter) GetEdgeCol(ctx interface{}, name interface{}) *MockInfinimeshCommonActionsRepo_GetEdgeCol_Call {
	return &MockInfinimeshCommonActionsRepo_GetEdgeCol_Call{Call: _e.mock.On("GetEdgeCol", ctx, name)}
}

func (_c *MockInfinimeshCommonActionsRepo_GetEdgeCol_Call) Run(run func(ctx context.Context, name string)) *MockInfinimeshCommonActionsRepo_GetEdgeCol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_GetEdgeCol_Call) Return(_a0 driver.Collection) *MockInfinimeshCommonActionsRepo_GetEdgeCol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_GetEdgeCol_Call) RunAndReturn(run func(context.Context, string) driver.Collection) *MockInfinimeshCommonActionsRepo_GetEdgeCol_Call {
	_c.Call.Return(run)
	return _c
}

// GetVertexCol provides a mock function with given fields: ctx, _a1, name
func (_m *MockInfinimeshCommonActionsRepo) GetVertexCol(ctx context.Context, _a1 string, name string) driver.Collection {
	ret := _m.Called(ctx, _a1, name)

	if len(ret) == 0 {
		panic("no return value specified for GetVertexCol")
	}

	var r0 driver.Collection
	if rf, ok := ret.Get(0).(func(context.Context, string, string) driver.Collection); ok {
		r0 = rf(ctx, _a1, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Collection)
		}
	}

	return r0
}

// MockInfinimeshCommonActionsRepo_GetVertexCol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVertexCol'
type MockInfinimeshCommonActionsRepo_GetVertexCol_Call struct {
	*mock.Call
}

// GetVertexCol is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - name string
func (_e *MockInfinimeshCommonActionsRepo_Expecter) GetVertexCol(ctx interface{}, _a1 interface{}, name interface{}) *MockInfinimeshCommonActionsRepo_GetVertexCol_Call {
	return &MockInfinimeshCommonActionsRepo_GetVertexCol_Call{Call: _e.mock.On("GetVertexCol", ctx, _a1, name)}
}

func (_c *MockInfinimeshCommonActionsRepo_GetVertexCol_Call) Run(run func(ctx context.Context, _a1 string, name string)) *MockInfinimeshCommonActionsRepo_GetVertexCol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_GetVertexCol_Call) Return(_a0 driver.Collection) *MockInfinimeshCommonActionsRepo_GetVertexCol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_GetVertexCol_Call) RunAndReturn(run func(context.Context, string, string) driver.Collection) *MockInfinimeshCommonActionsRepo_GetVertexCol_Call {
	_c.Call.Return(run)
	return _c
}

// Link provides a mock function with given fields: ctx, edge, from, to, lvl, role
func (_m *MockInfinimeshCommonActionsRepo) Link(ctx context.Context, edge driver.Collection, from graph.InfinimeshGraphNode, to graph.InfinimeshGraphNode, lvl access.Level, role access.Role) error {
	ret := _m.Called(ctx, edge, from, to, lvl, role)

	if len(ret) == 0 {
		panic("no return value specified for Link")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.Collection, graph.InfinimeshGraphNode, graph.InfinimeshGraphNode, access.Level, access.Role) error); ok {
		r0 = rf(ctx, edge, from, to, lvl, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInfinimeshCommonActionsRepo_Link_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Link'
type MockInfinimeshCommonActionsRepo_Link_Call struct {
	*mock.Call
}

// Link is a helper method to define mock.On call
//   - ctx context.Context
//   - edge driver.Collection
//   - from graph.InfinimeshGraphNode
//   - to graph.InfinimeshGraphNode
//   - lvl access.Level
//   - role access.Role
func (_e *MockInfinimeshCommonActionsRepo_Expecter) Link(ctx interface{}, edge interface{}, from interface{}, to interface{}, lvl interface{}, role interface{}) *MockInfinimeshCommonActionsRepo_Link_Call {
	return &MockInfinimeshCommonActionsRepo_Link_Call{Call: _e.mock.On("Link", ctx, edge, from, to, lvl, role)}
}

func (_c *MockInfinimeshCommonActionsRepo_Link_Call) Run(run func(ctx context.Context, edge driver.Collection, from graph.InfinimeshGraphNode, to graph.InfinimeshGraphNode, lvl access.Level, role access.Role)) *MockInfinimeshCommonActionsRepo_Link_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.Collection), args[2].(graph.InfinimeshGraphNode), args[3].(graph.InfinimeshGraphNode), args[4].(access.Level), args[5].(access.Role))
	})
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_Link_Call) Return(_a0 error) *MockInfinimeshCommonActionsRepo_Link_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_Link_Call) RunAndReturn(run func(context.Context, driver.Collection, graph.InfinimeshGraphNode, graph.InfinimeshGraphNode, access.Level, access.Role) error) *MockInfinimeshCommonActionsRepo_Link_Call {
	_c.Call.Return(run)
	return _c
}

// ListOwnedDeep provides a mock function with given fields: ctx, from
func (_m *MockInfinimeshCommonActionsRepo) ListOwnedDeep(ctx context.Context, from graph.InfinimeshGraphNode) (*access.Nodes, error) {
	ret := _m.Called(ctx, from)

	if len(ret) == 0 {
		panic("no return value specified for ListOwnedDeep")
	}

	var r0 *access.Nodes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.InfinimeshGraphNode) (*access.Nodes, error)); ok {
		return rf(ctx, from)
	}
	if rf, ok := ret.Get(0).(func(context.Context, graph.InfinimeshGraphNode) *access.Nodes); ok {
		r0 = rf(ctx, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.Nodes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, graph.InfinimeshGraphNode) error); ok {
		r1 = rf(ctx, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInfinimeshCommonActionsRepo_ListOwnedDeep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOwnedDeep'
type MockInfinimeshCommonActionsRepo_ListOwnedDeep_Call struct {
	*mock.Call
}

// ListOwnedDeep is a helper method to define mock.On call
//   - ctx context.Context
//   - from graph.InfinimeshGraphNode
func (_e *MockInfinimeshCommonActionsRepo_Expecter) ListOwnedDeep(ctx interface{}, from interface{}) *MockInfinimeshCommonActionsRepo_ListOwnedDeep_Call {
	return &MockInfinimeshCommonActionsRepo_ListOwnedDeep_Call{Call: _e.mock.On("ListOwnedDeep", ctx, from)}
}

func (_c *MockInfinimeshCommonActionsRepo_ListOwnedDeep_Call) Run(run func(ctx context.Context, from graph.InfinimeshGraphNode)) *MockInfinimeshCommonActionsRepo_ListOwnedDeep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.InfinimeshGraphNode))
	})
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_ListOwnedDeep_Call) Return(res *access.Nodes, err error) *MockInfinimeshCommonActionsRepo_ListOwnedDeep_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_ListOwnedDeep_Call) RunAndReturn(run func(context.Context, graph.InfinimeshGraphNode) (*access.Nodes, error)) *MockInfinimeshCommonActionsRepo_ListOwnedDeep_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function with given fields: ctx, c, obj, edge, ns
func (_m *MockInfinimeshCommonActionsRepo) Move(ctx context.Context, c graph.InfinimeshController, obj graph.InfinimeshGraphNode, edge driver.Collection, ns string) error {
	ret := _m.Called(ctx, c, obj, edge, ns)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.InfinimeshController, graph.InfinimeshGraphNode, driver.Collection, string) error); ok {
		r0 = rf(ctx, c, obj, edge, ns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInfinimeshCommonActionsRepo_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type MockInfinimeshCommonActionsRepo_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - ctx context.Context
//   - c graph.InfinimeshController
//   - obj graph.InfinimeshGraphNode
//   - edge driver.Collection
//   - ns string
func (_e *MockInfinimeshCommonActionsRepo_Expecter) Move(ctx interface{}, c interface{}, obj interface{}, edge interface{}, ns interface{}) *MockInfinimeshCommonActionsRepo_Move_Call {
	return &MockInfinimeshCommonActionsRepo_Move_Call{Call: _e.mock.On("Move", ctx, c, obj, edge, ns)}
}

func (_c *MockInfinimeshCommonActionsRepo_Move_Call) Run(run func(ctx context.Context, c graph.InfinimeshController, obj graph.InfinimeshGraphNode, edge driver.Collection, ns string)) *MockInfinimeshCommonActionsRepo_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.InfinimeshController), args[2].(graph.InfinimeshGraphNode), args[3].(driver.Collection), args[4].(string))
	})
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_Move_Call) Return(_a0 error) *MockInfinimeshCommonActionsRepo_Move_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_Move_Call) RunAndReturn(run func(context.Context, graph.InfinimeshController, graph.InfinimeshGraphNode, driver.Collection, string) error) *MockInfinimeshCommonActionsRepo_Move_Call {
	_c.Call.Return(run)
	return _c
}

// Toggle provides a mock function with given fields: ctx, node, field
func (_m *MockInfinimeshCommonActionsRepo) Toggle(ctx context.Context, node graph.InfinimeshGraphNode, field string) error {
	ret := _m.Called(ctx, node, field)

	if len(ret) == 0 {
		panic("no return value specified for Toggle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.InfinimeshGraphNode, string) error); ok {
		r0 = rf(ctx, node, field)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInfinimeshCommonActionsRepo_Toggle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Toggle'
type MockInfinimeshCommonActionsRepo_Toggle_Call struct {
	*mock.Call
}

// Toggle is a helper method to define mock.On call
//   - ctx context.Context
//   - node graph.InfinimeshGraphNode
//   - field string
func (_e *MockInfinimeshCommonActionsRepo_Expecter) Toggle(ctx interface{}, node interface{}, field interface{}) *MockInfinimeshCommonActionsRepo_Toggle_Call {
	return &MockInfinimeshCommonActionsRepo_Toggle_Call{Call: _e.mock.On("Toggle", ctx, node, field)}
}

func (_c *MockInfinimeshCommonActionsRepo_Toggle_Call) Run(run func(ctx context.Context, node graph.InfinimeshGraphNode, field string)) *MockInfinimeshCommonActionsRepo_Toggle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.InfinimeshGraphNode), args[2].(string))
	})
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_Toggle_Call) Return(_a0 error) *MockInfinimeshCommonActionsRepo_Toggle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInfinimeshCommonActionsRepo_Toggle_Call) RunAndReturn(run func(context.Context, graph.InfinimeshGraphNode, string) error) *MockInfinimeshCommonActionsRepo_Toggle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInfinimeshCommonActionsRepo creates a new instance of MockInfinimeshCommonActionsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInfinimeshCommonActionsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInfinimeshCommonActionsRepo {
	mock := &MockInfinimeshCommonActionsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
