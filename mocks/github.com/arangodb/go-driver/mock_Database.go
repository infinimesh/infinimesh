// Code generated by mockery v2.42.1. DO NOT EDIT.

package driver_mocks

import (
	context "context"

	driver "github.com/arangodb/go-driver"
	mock "github.com/stretchr/testify/mock"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// AbortTransaction provides a mock function with given fields: ctx, tid, opts
func (_m *MockDatabase) AbortTransaction(ctx context.Context, tid driver.TransactionID, opts *driver.AbortTransactionOptions) error {
	ret := _m.Called(ctx, tid, opts)

	if len(ret) == 0 {
		panic("no return value specified for AbortTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.TransactionID, *driver.AbortTransactionOptions) error); ok {
		r0 = rf(ctx, tid, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AbortTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortTransaction'
type MockDatabase_AbortTransaction_Call struct {
	*mock.Call
}

// AbortTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tid driver.TransactionID
//   - opts *driver.AbortTransactionOptions
func (_e *MockDatabase_Expecter) AbortTransaction(ctx interface{}, tid interface{}, opts interface{}) *MockDatabase_AbortTransaction_Call {
	return &MockDatabase_AbortTransaction_Call{Call: _e.mock.On("AbortTransaction", ctx, tid, opts)}
}

func (_c *MockDatabase_AbortTransaction_Call) Run(run func(ctx context.Context, tid driver.TransactionID, opts *driver.AbortTransactionOptions)) *MockDatabase_AbortTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.TransactionID), args[2].(*driver.AbortTransactionOptions))
	})
	return _c
}

func (_c *MockDatabase_AbortTransaction_Call) Return(_a0 error) *MockDatabase_AbortTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AbortTransaction_Call) RunAndReturn(run func(context.Context, driver.TransactionID, *driver.AbortTransactionOptions) error) *MockDatabase_AbortTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Analyzer provides a mock function with given fields: ctx, name
func (_m *MockDatabase) Analyzer(ctx context.Context, name string) (driver.ArangoSearchAnalyzer, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Analyzer")
	}

	var r0 driver.ArangoSearchAnalyzer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (driver.ArangoSearchAnalyzer, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.ArangoSearchAnalyzer); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ArangoSearchAnalyzer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Analyzer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Analyzer'
type MockDatabase_Analyzer_Call struct {
	*mock.Call
}

// Analyzer is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) Analyzer(ctx interface{}, name interface{}) *MockDatabase_Analyzer_Call {
	return &MockDatabase_Analyzer_Call{Call: _e.mock.On("Analyzer", ctx, name)}
}

func (_c *MockDatabase_Analyzer_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_Analyzer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_Analyzer_Call) Return(_a0 driver.ArangoSearchAnalyzer, _a1 error) *MockDatabase_Analyzer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Analyzer_Call) RunAndReturn(run func(context.Context, string) (driver.ArangoSearchAnalyzer, error)) *MockDatabase_Analyzer_Call {
	_c.Call.Return(run)
	return _c
}

// Analyzers provides a mock function with given fields: ctx
func (_m *MockDatabase) Analyzers(ctx context.Context) ([]driver.ArangoSearchAnalyzer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Analyzers")
	}

	var r0 []driver.ArangoSearchAnalyzer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]driver.ArangoSearchAnalyzer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []driver.ArangoSearchAnalyzer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.ArangoSearchAnalyzer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Analyzers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Analyzers'
type MockDatabase_Analyzers_Call struct {
	*mock.Call
}

// Analyzers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) Analyzers(ctx interface{}) *MockDatabase_Analyzers_Call {
	return &MockDatabase_Analyzers_Call{Call: _e.mock.On("Analyzers", ctx)}
}

func (_c *MockDatabase_Analyzers_Call) Run(run func(ctx context.Context)) *MockDatabase_Analyzers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_Analyzers_Call) Return(_a0 []driver.ArangoSearchAnalyzer, _a1 error) *MockDatabase_Analyzers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Analyzers_Call) RunAndReturn(run func(context.Context) ([]driver.ArangoSearchAnalyzer, error)) *MockDatabase_Analyzers_Call {
	_c.Call.Return(run)
	return _c
}

// BeginTransaction provides a mock function with given fields: ctx, cols, opts
func (_m *MockDatabase) BeginTransaction(ctx context.Context, cols driver.TransactionCollections, opts *driver.BeginTransactionOptions) (driver.TransactionID, error) {
	ret := _m.Called(ctx, cols, opts)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 driver.TransactionID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.TransactionCollections, *driver.BeginTransactionOptions) (driver.TransactionID, error)); ok {
		return rf(ctx, cols, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, driver.TransactionCollections, *driver.BeginTransactionOptions) driver.TransactionID); ok {
		r0 = rf(ctx, cols, opts)
	} else {
		r0 = ret.Get(0).(driver.TransactionID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, driver.TransactionCollections, *driver.BeginTransactionOptions) error); ok {
		r1 = rf(ctx, cols, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type MockDatabase_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - cols driver.TransactionCollections
//   - opts *driver.BeginTransactionOptions
func (_e *MockDatabase_Expecter) BeginTransaction(ctx interface{}, cols interface{}, opts interface{}) *MockDatabase_BeginTransaction_Call {
	return &MockDatabase_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", ctx, cols, opts)}
}

func (_c *MockDatabase_BeginTransaction_Call) Run(run func(ctx context.Context, cols driver.TransactionCollections, opts *driver.BeginTransactionOptions)) *MockDatabase_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.TransactionCollections), args[2].(*driver.BeginTransactionOptions))
	})
	return _c
}

func (_c *MockDatabase_BeginTransaction_Call) Return(_a0 driver.TransactionID, _a1 error) *MockDatabase_BeginTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_BeginTransaction_Call) RunAndReturn(run func(context.Context, driver.TransactionCollections, *driver.BeginTransactionOptions) (driver.TransactionID, error)) *MockDatabase_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CancelJob provides a mock function with given fields: ctx, id
func (_m *MockDatabase) CancelJob(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CancelJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_CancelJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelJob'
type MockDatabase_CancelJob_Call struct {
	*mock.Call
}

// CancelJob is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockDatabase_Expecter) CancelJob(ctx interface{}, id interface{}) *MockDatabase_CancelJob_Call {
	return &MockDatabase_CancelJob_Call{Call: _e.mock.On("CancelJob", ctx, id)}
}

func (_c *MockDatabase_CancelJob_Call) Run(run func(ctx context.Context, id string)) *MockDatabase_CancelJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_CancelJob_Call) Return(_a0 error) *MockDatabase_CancelJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_CancelJob_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabase_CancelJob_Call {
	_c.Call.Return(run)
	return _c
}

// Collection provides a mock function with given fields: ctx, name
func (_m *MockDatabase) Collection(ctx context.Context, name string) (driver.Collection, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 driver.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (driver.Collection, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.Collection); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type MockDatabase_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) Collection(ctx interface{}, name interface{}) *MockDatabase_Collection_Call {
	return &MockDatabase_Collection_Call{Call: _e.mock.On("Collection", ctx, name)}
}

func (_c *MockDatabase_Collection_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_Collection_Call) Return(_a0 driver.Collection, _a1 error) *MockDatabase_Collection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Collection_Call) RunAndReturn(run func(context.Context, string) (driver.Collection, error)) *MockDatabase_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// CollectionExists provides a mock function with given fields: ctx, name
func (_m *MockDatabase) CollectionExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CollectionExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CollectionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectionExists'
type MockDatabase_CollectionExists_Call struct {
	*mock.Call
}

// CollectionExists is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) CollectionExists(ctx interface{}, name interface{}) *MockDatabase_CollectionExists_Call {
	return &MockDatabase_CollectionExists_Call{Call: _e.mock.On("CollectionExists", ctx, name)}
}

func (_c *MockDatabase_CollectionExists_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_CollectionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_CollectionExists_Call) Return(_a0 bool, _a1 error) *MockDatabase_CollectionExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CollectionExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockDatabase_CollectionExists_Call {
	_c.Call.Return(run)
	return _c
}

// Collections provides a mock function with given fields: ctx
func (_m *MockDatabase) Collections(ctx context.Context) ([]driver.Collection, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Collections")
	}

	var r0 []driver.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]driver.Collection, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []driver.Collection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Collections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collections'
type MockDatabase_Collections_Call struct {
	*mock.Call
}

// Collections is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) Collections(ctx interface{}) *MockDatabase_Collections_Call {
	return &MockDatabase_Collections_Call{Call: _e.mock.On("Collections", ctx)}
}

func (_c *MockDatabase_Collections_Call) Run(run func(ctx context.Context)) *MockDatabase_Collections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_Collections_Call) Return(_a0 []driver.Collection, _a1 error) *MockDatabase_Collections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Collections_Call) RunAndReturn(run func(context.Context) ([]driver.Collection, error)) *MockDatabase_Collections_Call {
	_c.Call.Return(run)
	return _c
}

// CommitTransaction provides a mock function with given fields: ctx, tid, opts
func (_m *MockDatabase) CommitTransaction(ctx context.Context, tid driver.TransactionID, opts *driver.CommitTransactionOptions) error {
	ret := _m.Called(ctx, tid, opts)

	if len(ret) == 0 {
		panic("no return value specified for CommitTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.TransactionID, *driver.CommitTransactionOptions) error); ok {
		r0 = rf(ctx, tid, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_CommitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitTransaction'
type MockDatabase_CommitTransaction_Call struct {
	*mock.Call
}

// CommitTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tid driver.TransactionID
//   - opts *driver.CommitTransactionOptions
func (_e *MockDatabase_Expecter) CommitTransaction(ctx interface{}, tid interface{}, opts interface{}) *MockDatabase_CommitTransaction_Call {
	return &MockDatabase_CommitTransaction_Call{Call: _e.mock.On("CommitTransaction", ctx, tid, opts)}
}

func (_c *MockDatabase_CommitTransaction_Call) Run(run func(ctx context.Context, tid driver.TransactionID, opts *driver.CommitTransactionOptions)) *MockDatabase_CommitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.TransactionID), args[2].(*driver.CommitTransactionOptions))
	})
	return _c
}

func (_c *MockDatabase_CommitTransaction_Call) Return(_a0 error) *MockDatabase_CommitTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_CommitTransaction_Call) RunAndReturn(run func(context.Context, driver.TransactionID, *driver.CommitTransactionOptions) error) *MockDatabase_CommitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateArangoSearchAliasView provides a mock function with given fields: ctx, name, options
func (_m *MockDatabase) CreateArangoSearchAliasView(ctx context.Context, name string, options *driver.ArangoSearchAliasViewProperties) (driver.ArangoSearchViewAlias, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for CreateArangoSearchAliasView")
	}

	var r0 driver.ArangoSearchViewAlias
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.ArangoSearchAliasViewProperties) (driver.ArangoSearchViewAlias, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.ArangoSearchAliasViewProperties) driver.ArangoSearchViewAlias); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ArangoSearchViewAlias)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.ArangoSearchAliasViewProperties) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateArangoSearchAliasView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArangoSearchAliasView'
type MockDatabase_CreateArangoSearchAliasView_Call struct {
	*mock.Call
}

// CreateArangoSearchAliasView is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options *driver.ArangoSearchAliasViewProperties
func (_e *MockDatabase_Expecter) CreateArangoSearchAliasView(ctx interface{}, name interface{}, options interface{}) *MockDatabase_CreateArangoSearchAliasView_Call {
	return &MockDatabase_CreateArangoSearchAliasView_Call{Call: _e.mock.On("CreateArangoSearchAliasView", ctx, name, options)}
}

func (_c *MockDatabase_CreateArangoSearchAliasView_Call) Run(run func(ctx context.Context, name string, options *driver.ArangoSearchAliasViewProperties)) *MockDatabase_CreateArangoSearchAliasView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*driver.ArangoSearchAliasViewProperties))
	})
	return _c
}

func (_c *MockDatabase_CreateArangoSearchAliasView_Call) Return(_a0 driver.ArangoSearchViewAlias, _a1 error) *MockDatabase_CreateArangoSearchAliasView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateArangoSearchAliasView_Call) RunAndReturn(run func(context.Context, string, *driver.ArangoSearchAliasViewProperties) (driver.ArangoSearchViewAlias, error)) *MockDatabase_CreateArangoSearchAliasView_Call {
	_c.Call.Return(run)
	return _c
}

// CreateArangoSearchView provides a mock function with given fields: ctx, name, options
func (_m *MockDatabase) CreateArangoSearchView(ctx context.Context, name string, options *driver.ArangoSearchViewProperties) (driver.ArangoSearchView, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for CreateArangoSearchView")
	}

	var r0 driver.ArangoSearchView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.ArangoSearchViewProperties) (driver.ArangoSearchView, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.ArangoSearchViewProperties) driver.ArangoSearchView); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ArangoSearchView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.ArangoSearchViewProperties) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateArangoSearchView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArangoSearchView'
type MockDatabase_CreateArangoSearchView_Call struct {
	*mock.Call
}

// CreateArangoSearchView is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options *driver.ArangoSearchViewProperties
func (_e *MockDatabase_Expecter) CreateArangoSearchView(ctx interface{}, name interface{}, options interface{}) *MockDatabase_CreateArangoSearchView_Call {
	return &MockDatabase_CreateArangoSearchView_Call{Call: _e.mock.On("CreateArangoSearchView", ctx, name, options)}
}

func (_c *MockDatabase_CreateArangoSearchView_Call) Run(run func(ctx context.Context, name string, options *driver.ArangoSearchViewProperties)) *MockDatabase_CreateArangoSearchView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*driver.ArangoSearchViewProperties))
	})
	return _c
}

func (_c *MockDatabase_CreateArangoSearchView_Call) Return(_a0 driver.ArangoSearchView, _a1 error) *MockDatabase_CreateArangoSearchView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateArangoSearchView_Call) RunAndReturn(run func(context.Context, string, *driver.ArangoSearchViewProperties) (driver.ArangoSearchView, error)) *MockDatabase_CreateArangoSearchView_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCollection provides a mock function with given fields: ctx, name, options
func (_m *MockDatabase) CreateCollection(ctx context.Context, name string, options *driver.CreateCollectionOptions) (driver.Collection, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 driver.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.CreateCollectionOptions) (driver.Collection, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.CreateCollectionOptions) driver.Collection); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.CreateCollectionOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type MockDatabase_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options *driver.CreateCollectionOptions
func (_e *MockDatabase_Expecter) CreateCollection(ctx interface{}, name interface{}, options interface{}) *MockDatabase_CreateCollection_Call {
	return &MockDatabase_CreateCollection_Call{Call: _e.mock.On("CreateCollection", ctx, name, options)}
}

func (_c *MockDatabase_CreateCollection_Call) Run(run func(ctx context.Context, name string, options *driver.CreateCollectionOptions)) *MockDatabase_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*driver.CreateCollectionOptions))
	})
	return _c
}

func (_c *MockDatabase_CreateCollection_Call) Return(_a0 driver.Collection, _a1 error) *MockDatabase_CreateCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateCollection_Call) RunAndReturn(run func(context.Context, string, *driver.CreateCollectionOptions) (driver.Collection, error)) *MockDatabase_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGraph provides a mock function with given fields: ctx, name, options
func (_m *MockDatabase) CreateGraph(ctx context.Context, name string, options *driver.CreateGraphOptions) (driver.Graph, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for CreateGraph")
	}

	var r0 driver.Graph
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.CreateGraphOptions) (driver.Graph, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.CreateGraphOptions) driver.Graph); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Graph)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.CreateGraphOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGraph'
type MockDatabase_CreateGraph_Call struct {
	*mock.Call
}

// CreateGraph is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options *driver.CreateGraphOptions
func (_e *MockDatabase_Expecter) CreateGraph(ctx interface{}, name interface{}, options interface{}) *MockDatabase_CreateGraph_Call {
	return &MockDatabase_CreateGraph_Call{Call: _e.mock.On("CreateGraph", ctx, name, options)}
}

func (_c *MockDatabase_CreateGraph_Call) Run(run func(ctx context.Context, name string, options *driver.CreateGraphOptions)) *MockDatabase_CreateGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*driver.CreateGraphOptions))
	})
	return _c
}

func (_c *MockDatabase_CreateGraph_Call) Return(_a0 driver.Graph, _a1 error) *MockDatabase_CreateGraph_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateGraph_Call) RunAndReturn(run func(context.Context, string, *driver.CreateGraphOptions) (driver.Graph, error)) *MockDatabase_CreateGraph_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGraphV2 provides a mock function with given fields: ctx, name, options
func (_m *MockDatabase) CreateGraphV2(ctx context.Context, name string, options *driver.CreateGraphOptions) (driver.Graph, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for CreateGraphV2")
	}

	var r0 driver.Graph
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.CreateGraphOptions) (driver.Graph, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.CreateGraphOptions) driver.Graph); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Graph)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.CreateGraphOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateGraphV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGraphV2'
type MockDatabase_CreateGraphV2_Call struct {
	*mock.Call
}

// CreateGraphV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options *driver.CreateGraphOptions
func (_e *MockDatabase_Expecter) CreateGraphV2(ctx interface{}, name interface{}, options interface{}) *MockDatabase_CreateGraphV2_Call {
	return &MockDatabase_CreateGraphV2_Call{Call: _e.mock.On("CreateGraphV2", ctx, name, options)}
}

func (_c *MockDatabase_CreateGraphV2_Call) Run(run func(ctx context.Context, name string, options *driver.CreateGraphOptions)) *MockDatabase_CreateGraphV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*driver.CreateGraphOptions))
	})
	return _c
}

func (_c *MockDatabase_CreateGraphV2_Call) Return(_a0 driver.Graph, _a1 error) *MockDatabase_CreateGraphV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateGraphV2_Call) RunAndReturn(run func(context.Context, string, *driver.CreateGraphOptions) (driver.Graph, error)) *MockDatabase_CreateGraphV2_Call {
	_c.Call.Return(run)
	return _c
}

// EngineInfo provides a mock function with given fields: ctx
func (_m *MockDatabase) EngineInfo(ctx context.Context) (driver.EngineInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for EngineInfo")
	}

	var r0 driver.EngineInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (driver.EngineInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) driver.EngineInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(driver.EngineInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_EngineInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EngineInfo'
type MockDatabase_EngineInfo_Call struct {
	*mock.Call
}

// EngineInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) EngineInfo(ctx interface{}) *MockDatabase_EngineInfo_Call {
	return &MockDatabase_EngineInfo_Call{Call: _e.mock.On("EngineInfo", ctx)}
}

func (_c *MockDatabase_EngineInfo_Call) Run(run func(ctx context.Context)) *MockDatabase_EngineInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_EngineInfo_Call) Return(_a0 driver.EngineInfo, _a1 error) *MockDatabase_EngineInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_EngineInfo_Call) RunAndReturn(run func(context.Context) (driver.EngineInfo, error)) *MockDatabase_EngineInfo_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureAnalyzer provides a mock function with given fields: ctx, analyzer
func (_m *MockDatabase) EnsureAnalyzer(ctx context.Context, analyzer driver.ArangoSearchAnalyzerDefinition) (bool, driver.ArangoSearchAnalyzer, error) {
	ret := _m.Called(ctx, analyzer)

	if len(ret) == 0 {
		panic("no return value specified for EnsureAnalyzer")
	}

	var r0 bool
	var r1 driver.ArangoSearchAnalyzer
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.ArangoSearchAnalyzerDefinition) (bool, driver.ArangoSearchAnalyzer, error)); ok {
		return rf(ctx, analyzer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, driver.ArangoSearchAnalyzerDefinition) bool); ok {
		r0 = rf(ctx, analyzer)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, driver.ArangoSearchAnalyzerDefinition) driver.ArangoSearchAnalyzer); ok {
		r1 = rf(ctx, analyzer)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(driver.ArangoSearchAnalyzer)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, driver.ArangoSearchAnalyzerDefinition) error); ok {
		r2 = rf(ctx, analyzer)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatabase_EnsureAnalyzer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureAnalyzer'
type MockDatabase_EnsureAnalyzer_Call struct {
	*mock.Call
}

// EnsureAnalyzer is a helper method to define mock.On call
//   - ctx context.Context
//   - analyzer driver.ArangoSearchAnalyzerDefinition
func (_e *MockDatabase_Expecter) EnsureAnalyzer(ctx interface{}, analyzer interface{}) *MockDatabase_EnsureAnalyzer_Call {
	return &MockDatabase_EnsureAnalyzer_Call{Call: _e.mock.On("EnsureAnalyzer", ctx, analyzer)}
}

func (_c *MockDatabase_EnsureAnalyzer_Call) Run(run func(ctx context.Context, analyzer driver.ArangoSearchAnalyzerDefinition)) *MockDatabase_EnsureAnalyzer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.ArangoSearchAnalyzerDefinition))
	})
	return _c
}

func (_c *MockDatabase_EnsureAnalyzer_Call) Return(_a0 bool, _a1 driver.ArangoSearchAnalyzer, _a2 error) *MockDatabase_EnsureAnalyzer_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDatabase_EnsureAnalyzer_Call) RunAndReturn(run func(context.Context, driver.ArangoSearchAnalyzerDefinition) (bool, driver.ArangoSearchAnalyzer, error)) *MockDatabase_EnsureAnalyzer_Call {
	_c.Call.Return(run)
	return _c
}

// ExplainQuery provides a mock function with given fields: ctx, query, bindVars, opts
func (_m *MockDatabase) ExplainQuery(ctx context.Context, query string, bindVars map[string]interface{}, opts *driver.ExplainQueryOptions) (driver.ExplainQueryResult, error) {
	ret := _m.Called(ctx, query, bindVars, opts)

	if len(ret) == 0 {
		panic("no return value specified for ExplainQuery")
	}

	var r0 driver.ExplainQueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, *driver.ExplainQueryOptions) (driver.ExplainQueryResult, error)); ok {
		return rf(ctx, query, bindVars, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, *driver.ExplainQueryOptions) driver.ExplainQueryResult); ok {
		r0 = rf(ctx, query, bindVars, opts)
	} else {
		r0 = ret.Get(0).(driver.ExplainQueryResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}, *driver.ExplainQueryOptions) error); ok {
		r1 = rf(ctx, query, bindVars, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_ExplainQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExplainQuery'
type MockDatabase_ExplainQuery_Call struct {
	*mock.Call
}

// ExplainQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - bindVars map[string]interface{}
//   - opts *driver.ExplainQueryOptions
func (_e *MockDatabase_Expecter) ExplainQuery(ctx interface{}, query interface{}, bindVars interface{}, opts interface{}) *MockDatabase_ExplainQuery_Call {
	return &MockDatabase_ExplainQuery_Call{Call: _e.mock.On("ExplainQuery", ctx, query, bindVars, opts)}
}

func (_c *MockDatabase_ExplainQuery_Call) Run(run func(ctx context.Context, query string, bindVars map[string]interface{}, opts *driver.ExplainQueryOptions)) *MockDatabase_ExplainQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}), args[3].(*driver.ExplainQueryOptions))
	})
	return _c
}

func (_c *MockDatabase_ExplainQuery_Call) Return(_a0 driver.ExplainQueryResult, _a1 error) *MockDatabase_ExplainQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_ExplainQuery_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}, *driver.ExplainQueryOptions) (driver.ExplainQueryResult, error)) *MockDatabase_ExplainQuery_Call {
	_c.Call.Return(run)
	return _c
}

// GetJob provides a mock function with given fields: ctx, id
func (_m *MockDatabase) GetJob(ctx context.Context, id string) (*driver.PregelJob, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *driver.PregelJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*driver.PregelJob, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *driver.PregelJob); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*driver.PregelJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockDatabase_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockDatabase_Expecter) GetJob(ctx interface{}, id interface{}) *MockDatabase_GetJob_Call {
	return &MockDatabase_GetJob_Call{Call: _e.mock.On("GetJob", ctx, id)}
}

func (_c *MockDatabase_GetJob_Call) Run(run func(ctx context.Context, id string)) *MockDatabase_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_GetJob_Call) Return(_a0 *driver.PregelJob, _a1 error) *MockDatabase_GetJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetJob_Call) RunAndReturn(run func(context.Context, string) (*driver.PregelJob, error)) *MockDatabase_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobs provides a mock function with given fields: ctx
func (_m *MockDatabase) GetJobs(ctx context.Context) ([]*driver.PregelJob, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetJobs")
	}

	var r0 []*driver.PregelJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*driver.PregelJob, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*driver.PregelJob); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*driver.PregelJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobs'
type MockDatabase_GetJobs_Call struct {
	*mock.Call
}

// GetJobs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetJobs(ctx interface{}) *MockDatabase_GetJobs_Call {
	return &MockDatabase_GetJobs_Call{Call: _e.mock.On("GetJobs", ctx)}
}

func (_c *MockDatabase_GetJobs_Call) Run(run func(ctx context.Context)) *MockDatabase_GetJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_GetJobs_Call) Return(_a0 []*driver.PregelJob, _a1 error) *MockDatabase_GetJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetJobs_Call) RunAndReturn(run func(context.Context) ([]*driver.PregelJob, error)) *MockDatabase_GetJobs_Call {
	_c.Call.Return(run)
	return _c
}

// Graph provides a mock function with given fields: ctx, name
func (_m *MockDatabase) Graph(ctx context.Context, name string) (driver.Graph, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Graph")
	}

	var r0 driver.Graph
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (driver.Graph, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.Graph); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Graph)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Graph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Graph'
type MockDatabase_Graph_Call struct {
	*mock.Call
}

// Graph is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) Graph(ctx interface{}, name interface{}) *MockDatabase_Graph_Call {
	return &MockDatabase_Graph_Call{Call: _e.mock.On("Graph", ctx, name)}
}

func (_c *MockDatabase_Graph_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_Graph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_Graph_Call) Return(_a0 driver.Graph, _a1 error) *MockDatabase_Graph_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Graph_Call) RunAndReturn(run func(context.Context, string) (driver.Graph, error)) *MockDatabase_Graph_Call {
	_c.Call.Return(run)
	return _c
}

// GraphExists provides a mock function with given fields: ctx, name
func (_m *MockDatabase) GraphExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GraphExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GraphExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GraphExists'
type MockDatabase_GraphExists_Call struct {
	*mock.Call
}

// GraphExists is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) GraphExists(ctx interface{}, name interface{}) *MockDatabase_GraphExists_Call {
	return &MockDatabase_GraphExists_Call{Call: _e.mock.On("GraphExists", ctx, name)}
}

func (_c *MockDatabase_GraphExists_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_GraphExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_GraphExists_Call) Return(_a0 bool, _a1 error) *MockDatabase_GraphExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GraphExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockDatabase_GraphExists_Call {
	_c.Call.Return(run)
	return _c
}

// Graphs provides a mock function with given fields: ctx
func (_m *MockDatabase) Graphs(ctx context.Context) ([]driver.Graph, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Graphs")
	}

	var r0 []driver.Graph
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]driver.Graph, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []driver.Graph); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.Graph)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Graphs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Graphs'
type MockDatabase_Graphs_Call struct {
	*mock.Call
}

// Graphs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) Graphs(ctx interface{}) *MockDatabase_Graphs_Call {
	return &MockDatabase_Graphs_Call{Call: _e.mock.On("Graphs", ctx)}
}

func (_c *MockDatabase_Graphs_Call) Run(run func(ctx context.Context)) *MockDatabase_Graphs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_Graphs_Call) Return(_a0 []driver.Graph, _a1 error) *MockDatabase_Graphs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Graphs_Call) RunAndReturn(run func(context.Context) ([]driver.Graph, error)) *MockDatabase_Graphs_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: ctx
func (_m *MockDatabase) Info(ctx context.Context) (driver.DatabaseInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 driver.DatabaseInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (driver.DatabaseInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) driver.DatabaseInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(driver.DatabaseInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockDatabase_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) Info(ctx interface{}) *MockDatabase_Info_Call {
	return &MockDatabase_Info_Call{Call: _e.mock.On("Info", ctx)}
}

func (_c *MockDatabase_Info_Call) Run(run func(ctx context.Context)) *MockDatabase_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_Info_Call) Return(_a0 driver.DatabaseInfo, _a1 error) *MockDatabase_Info_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Info_Call) RunAndReturn(run func(context.Context) (driver.DatabaseInfo, error)) *MockDatabase_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockDatabase) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDatabase_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockDatabase_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) Name() *MockDatabase_Name_Call {
	return &MockDatabase_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockDatabase_Name_Call) Run(run func()) *MockDatabase_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_Name_Call) Return(_a0 string) *MockDatabase_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Name_Call) RunAndReturn(run func() string) *MockDatabase_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OptimizerRulesForQueries provides a mock function with given fields: ctx
func (_m *MockDatabase) OptimizerRulesForQueries(ctx context.Context) ([]driver.QueryRule, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OptimizerRulesForQueries")
	}

	var r0 []driver.QueryRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]driver.QueryRule, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []driver.QueryRule); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.QueryRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_OptimizerRulesForQueries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OptimizerRulesForQueries'
type MockDatabase_OptimizerRulesForQueries_Call struct {
	*mock.Call
}

// OptimizerRulesForQueries is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) OptimizerRulesForQueries(ctx interface{}) *MockDatabase_OptimizerRulesForQueries_Call {
	return &MockDatabase_OptimizerRulesForQueries_Call{Call: _e.mock.On("OptimizerRulesForQueries", ctx)}
}

func (_c *MockDatabase_OptimizerRulesForQueries_Call) Run(run func(ctx context.Context)) *MockDatabase_OptimizerRulesForQueries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_OptimizerRulesForQueries_Call) Return(_a0 []driver.QueryRule, _a1 error) *MockDatabase_OptimizerRulesForQueries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_OptimizerRulesForQueries_Call) RunAndReturn(run func(context.Context) ([]driver.QueryRule, error)) *MockDatabase_OptimizerRulesForQueries_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, query, bindVars
func (_m *MockDatabase) Query(ctx context.Context, query string, bindVars map[string]interface{}) (driver.Cursor, error) {
	ret := _m.Called(ctx, query, bindVars)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 driver.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) (driver.Cursor, error)); ok {
		return rf(ctx, query, bindVars)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) driver.Cursor); ok {
		r0 = rf(ctx, query, bindVars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, query, bindVars)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDatabase_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - bindVars map[string]interface{}
func (_e *MockDatabase_Expecter) Query(ctx interface{}, query interface{}, bindVars interface{}) *MockDatabase_Query_Call {
	return &MockDatabase_Query_Call{Call: _e.mock.On("Query", ctx, query, bindVars)}
}

func (_c *MockDatabase_Query_Call) Run(run func(ctx context.Context, query string, bindVars map[string]interface{})) *MockDatabase_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockDatabase_Query_Call) Return(_a0 driver.Cursor, _a1 error) *MockDatabase_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Query_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}) (driver.Cursor, error)) *MockDatabase_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx
func (_m *MockDatabase) Remove(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockDatabase_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) Remove(ctx interface{}) *MockDatabase_Remove_Call {
	return &MockDatabase_Remove_Call{Call: _e.mock.On("Remove", ctx)}
}

func (_c *MockDatabase_Remove_Call) Run(run func(ctx context.Context)) *MockDatabase_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_Remove_Call) Return(_a0 error) *MockDatabase_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Remove_Call) RunAndReturn(run func(context.Context) error) *MockDatabase_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// StartJob provides a mock function with given fields: ctx, options
func (_m *MockDatabase) StartJob(ctx context.Context, options driver.PregelJobOptions) (string, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for StartJob")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.PregelJobOptions) (string, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, driver.PregelJobOptions) string); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, driver.PregelJobOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_StartJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartJob'
type MockDatabase_StartJob_Call struct {
	*mock.Call
}

// StartJob is a helper method to define mock.On call
//   - ctx context.Context
//   - options driver.PregelJobOptions
func (_e *MockDatabase_Expecter) StartJob(ctx interface{}, options interface{}) *MockDatabase_StartJob_Call {
	return &MockDatabase_StartJob_Call{Call: _e.mock.On("StartJob", ctx, options)}
}

func (_c *MockDatabase_StartJob_Call) Run(run func(ctx context.Context, options driver.PregelJobOptions)) *MockDatabase_StartJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.PregelJobOptions))
	})
	return _c
}

func (_c *MockDatabase_StartJob_Call) Return(_a0 string, _a1 error) *MockDatabase_StartJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_StartJob_Call) RunAndReturn(run func(context.Context, driver.PregelJobOptions) (string, error)) *MockDatabase_StartJob_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: ctx, action, options
func (_m *MockDatabase) Transaction(ctx context.Context, action string, options *driver.TransactionOptions) (interface{}, error) {
	ret := _m.Called(ctx, action, options)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.TransactionOptions) (interface{}, error)); ok {
		return rf(ctx, action, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.TransactionOptions) interface{}); ok {
		r0 = rf(ctx, action, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.TransactionOptions) error); ok {
		r1 = rf(ctx, action, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type MockDatabase_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - ctx context.Context
//   - action string
//   - options *driver.TransactionOptions
func (_e *MockDatabase_Expecter) Transaction(ctx interface{}, action interface{}, options interface{}) *MockDatabase_Transaction_Call {
	return &MockDatabase_Transaction_Call{Call: _e.mock.On("Transaction", ctx, action, options)}
}

func (_c *MockDatabase_Transaction_Call) Run(run func(ctx context.Context, action string, options *driver.TransactionOptions)) *MockDatabase_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*driver.TransactionOptions))
	})
	return _c
}

func (_c *MockDatabase_Transaction_Call) Return(_a0 interface{}, _a1 error) *MockDatabase_Transaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Transaction_Call) RunAndReturn(run func(context.Context, string, *driver.TransactionOptions) (interface{}, error)) *MockDatabase_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionStatus provides a mock function with given fields: ctx, tid
func (_m *MockDatabase) TransactionStatus(ctx context.Context, tid driver.TransactionID) (driver.TransactionStatusRecord, error) {
	ret := _m.Called(ctx, tid)

	if len(ret) == 0 {
		panic("no return value specified for TransactionStatus")
	}

	var r0 driver.TransactionStatusRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.TransactionID) (driver.TransactionStatusRecord, error)); ok {
		return rf(ctx, tid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, driver.TransactionID) driver.TransactionStatusRecord); ok {
		r0 = rf(ctx, tid)
	} else {
		r0 = ret.Get(0).(driver.TransactionStatusRecord)
	}

	if rf, ok := ret.Get(1).(func(context.Context, driver.TransactionID) error); ok {
		r1 = rf(ctx, tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_TransactionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionStatus'
type MockDatabase_TransactionStatus_Call struct {
	*mock.Call
}

// TransactionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - tid driver.TransactionID
func (_e *MockDatabase_Expecter) TransactionStatus(ctx interface{}, tid interface{}) *MockDatabase_TransactionStatus_Call {
	return &MockDatabase_TransactionStatus_Call{Call: _e.mock.On("TransactionStatus", ctx, tid)}
}

func (_c *MockDatabase_TransactionStatus_Call) Run(run func(ctx context.Context, tid driver.TransactionID)) *MockDatabase_TransactionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.TransactionID))
	})
	return _c
}

func (_c *MockDatabase_TransactionStatus_Call) Return(_a0 driver.TransactionStatusRecord, _a1 error) *MockDatabase_TransactionStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_TransactionStatus_Call) RunAndReturn(run func(context.Context, driver.TransactionID) (driver.TransactionStatusRecord, error)) *MockDatabase_TransactionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateQuery provides a mock function with given fields: ctx, query
func (_m *MockDatabase) ValidateQuery(ctx context.Context, query string) error {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for ValidateQuery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_ValidateQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateQuery'
type MockDatabase_ValidateQuery_Call struct {
	*mock.Call
}

// ValidateQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *MockDatabase_Expecter) ValidateQuery(ctx interface{}, query interface{}) *MockDatabase_ValidateQuery_Call {
	return &MockDatabase_ValidateQuery_Call{Call: _e.mock.On("ValidateQuery", ctx, query)}
}

func (_c *MockDatabase_ValidateQuery_Call) Run(run func(ctx context.Context, query string)) *MockDatabase_ValidateQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_ValidateQuery_Call) Return(_a0 error) *MockDatabase_ValidateQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_ValidateQuery_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabase_ValidateQuery_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function with given fields: ctx, name
func (_m *MockDatabase) View(ctx context.Context, name string) (driver.View, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 driver.View
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (driver.View, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.View); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.View)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockDatabase_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) View(ctx interface{}, name interface{}) *MockDatabase_View_Call {
	return &MockDatabase_View_Call{Call: _e.mock.On("View", ctx, name)}
}

func (_c *MockDatabase_View_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_View_Call) Return(_a0 driver.View, _a1 error) *MockDatabase_View_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_View_Call) RunAndReturn(run func(context.Context, string) (driver.View, error)) *MockDatabase_View_Call {
	_c.Call.Return(run)
	return _c
}

// ViewExists provides a mock function with given fields: ctx, name
func (_m *MockDatabase) ViewExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ViewExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_ViewExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewExists'
type MockDatabase_ViewExists_Call struct {
	*mock.Call
}

// ViewExists is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) ViewExists(ctx interface{}, name interface{}) *MockDatabase_ViewExists_Call {
	return &MockDatabase_ViewExists_Call{Call: _e.mock.On("ViewExists", ctx, name)}
}

func (_c *MockDatabase_ViewExists_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_ViewExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_ViewExists_Call) Return(_a0 bool, _a1 error) *MockDatabase_ViewExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_ViewExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockDatabase_ViewExists_Call {
	_c.Call.Return(run)
	return _c
}

// Views provides a mock function with given fields: ctx
func (_m *MockDatabase) Views(ctx context.Context) ([]driver.View, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Views")
	}

	var r0 []driver.View
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]driver.View, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []driver.View); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.View)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Views_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Views'
type MockDatabase_Views_Call struct {
	*mock.Call
}

// Views is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) Views(ctx interface{}) *MockDatabase_Views_Call {
	return &MockDatabase_Views_Call{Call: _e.mock.On("Views", ctx)}
}

func (_c *MockDatabase_Views_Call) Run(run func(ctx context.Context)) *MockDatabase_Views_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_Views_Call) Return(_a0 []driver.View, _a1 error) *MockDatabase_Views_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Views_Call) RunAndReturn(run func(context.Context) ([]driver.View, error)) *MockDatabase_Views_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
