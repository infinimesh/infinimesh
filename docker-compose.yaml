version: "3.8"
services:

  proxy:
    image: traefik:latest
    labels:
      - traefik.http.routers.api.rule=Host(`traefik.${BASE_DOMAIN}`)
      - traefik.http.routers.api.entrypoints=http
      - traefik.http.routers.api.service=api@internal
    ports:
      - 80:80
      - 8000:8000
    volumes:
      - ./traefik.yml:/traefik.yml
      - /var/run/docker.sock:/var/run/docker.sock

  console:
    image: "ghcr.io/infinimesh/infinimesh/console:${INFINIMESH_VERSION}"
    restart: always
    depends_on:
      - proxy
      - web
    labels:
      - traefik.http.routers.console.rule=Host(`console.${BASE_DOMAIN}`)
      - traefik.http.routers.console.entrypoints=http
      - traefik.http.routers.console.service=console@docker
      - traefik.http.services.console.loadbalancer.server.port=80
  web:
    image: "ghcr.io/infinimesh/infinimesh/web:${INFINIMESH_VERSION}"
    restart: always
    depends_on:
      - repo
      - proxy
    labels:
      - traefik.http.routers.web.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.web.entrypoints=http
      - traefik.http.routers.web.service=web@docker
      - traefik.http.services.web.loadbalancer.server.port=8000
    environment:
      APISERVER_HOST: repo:8000
      HTTP_FS: "http://media.${BASE_DOMAIN}"
      HANDSFREE: "http://api.${BASE_DOMAIN}"
      TIMESERIES: "http://api.${BASE_DOMAIN}/infinimesh.timeseries.ui/"

  rabbitmq:
    image: rabbitmq:3.9-management
    labels:
      - traefik.http.routers.rabbitmq.rule=Host(`rbmq.${BASE_DOMAIN}`)
      - traefik.http.routers.rabbitmq.entrypoints=http
      - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
    ports:
     - 5672:5672
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"

  mqtt:
    image: "ghcr.io/infinimesh/infinimesh/mqtt-bridge:${INFINIMESH_VERSION}"
    restart: always
    depends_on:
      - rabbitmq
      - repo
      - proxy
    ports:
      - 1883:1883 # BasicAuth(non-TLS)
      - 8883:8883 # Standard(TLS)
      - 2112:2112 # Metrics
    volumes:
      - ./hack/server.crt:/cert/tls.crt
      - ./hack/server.key:/cert/tls.key
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      DEVICES_HOST: repo:8000
      SHADOW_HOST: shadow:8000
      SIGNING_KEY: "${SIGNING_KEY}"

  repo:
    image: "ghcr.io/infinimesh/infinimesh/repo:${INFINIMESH_VERSION}"
    restart: always
    labels:
      - traefik.http.routers.repo.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.repo.entrypoints=grpc
      - traefik.http.routers.repo.service=repo@docker
      - traefik.http.services.repo.loadbalancer.server.port=8000
      - traefik.http.services.repo.loadbalancer.server.scheme=h2c

      - traefik.http.routers.repo_connect.rule=Host(`api.${BASE_DOMAIN}`)&&PathPrefix("/infinimesh.node.", "/infinimesh.shadow", "/infinimesh.plugins", "/infinimesh.eventbus.", "/oauth")
      - traefik.http.routers.repo_connect.entrypoints=http
      - traefik.http.routers.repo_connect.service=repo_connect@docker
      - traefik.http.services.repo_connect.loadbalancer.server.port=8000

    depends_on:
      - db
      - proxy
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      DB_HOST: db:8529
      DB_CRED: root:openSesame
      SHADOW_HOST: shadow:8000
      INF_DEFAULT_ROOT_PASS: infinimesh
      SIGNING_KEY: "${SIGNING_KEY}"
      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      HANDSFREE_HOST: handsfree:8000
      SERVICES: "accounts,namespaces,sessions,devices,shadow,plugins,internal,oauth,eventbus"

      OAUTH_PORT: 80
      REGISTRY_HOST: repo:8000
      NAMESPACES_HOST: repo:8000
      CORS_ALLOWED: "https://*.${BASE_DOMAIN},https://*"
    volumes:
      - ./oauth2_config.yaml:/oauth2_config.yaml

  shadow:
    image: "ghcr.io/infinimesh/infinimesh/shadow:${INFINIMESH_VERSION}"
    restart: unless-stopped
    labels:
      - traefik.enable=false
    depends_on:
      - redis
      - rabbitmq
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      REDIS_HOST: redis:6379
      DEVICES_HOST: repo:8000
      SIGNING_KEY: "${SIGNING_KEY}"

  redis:
    image: redis:latest
    labels:
      - traefik.enable=false
    ports:
      - 6379:6379
    command: [ "redis-server", "--appendonly", "yes" ]

  db:
    image: arangodb/arangodb:latest
    restart: always
    environment:
      ARANGO_ROOT_PASSWORD: openSesame
    labels:
      - traefik.http.routers.db.rule=Host(`db.${BASE_DOMAIN}`)
      - traefik.http.routers.db.entrypoints=http
      - traefik.http.services.db.loadbalancer.server.port=8529
    volumes:
      - data:/var/lib/arangodb3

  # Comment this service and HTTP_FS env variable at web service to disable http-fs
  http-fs:
    image: ghcr.io/infinimesh/http-fs:latest
    restart: always
    labels:
      - traefik.http.routers.http-fs.rule=Host(`media.${BASE_DOMAIN}`)
      - traefik.http.routers.http-fs.entrypoints=http
      - traefik.http.services.http-fs.loadbalancer.server.port=8000
    volumes:
      - user-media:/static

  # Comment this service and HF env variable at web service to disable handsfree service
  handsfree:
    image: "ghcr.io/infinimesh/infinimesh/handsfree:${INFINIMESH_VERSION}"
    restart: always
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      SIGNING_KEY: "${SIGNING_KEY}"
    labels:
      - traefik.http.routers.handsfree.rule=Host(`api.${BASE_DOMAIN}`)&&PathPrefix("/infinimesh.handsfree.")
      - traefik.http.routers.handsfree.entrypoints=grpc
      - traefik.http.services.handsfree.loadbalancer.server.port=8000
      - traefik.http.services.handsfree.loadbalancer.server.scheme=h2c

volumes:
  data:
  user-media:
